head	1.57;
access;
symbols;
locks; strict;
comment	@# @;


1.57
date	2015.11.01.20.02.30;	author root;	state Exp;
branches;
next	1.56;

1.56
date	2015.10.19.00.17.06;	author root;	state Exp;
branches;
next	1.55;

1.55
date	2013.05.02.22.08.03;	author root;	state Exp;
branches;
next	1.54;

1.54
date	2013.02.27.02.12.33;	author root;	state Exp;
branches;
next	1.53;

1.53
date	2013.02.04.17.53.45;	author root;	state Exp;
branches;
next	1.52;

1.52
date	2012.11.01.22.01.57;	author root;	state Exp;
branches;
next	1.51;

1.51
date	2012.11.01.18.33.44;	author root;	state Exp;
branches;
next	1.50;

1.50
date	2012.10.29.18.41.53;	author root;	state Exp;
branches;
next	1.49;

1.49
date	2012.10.27.04.19.02;	author root;	state Exp;
branches;
next	1.48;

1.48
date	2012.10.03.22.11.42;	author root;	state Exp;
branches;
next	1.47;

1.47
date	2012.09.28.22.17.04;	author root;	state Exp;
branches;
next	1.46;

1.46
date	2012.09.28.16.52.09;	author root;	state Exp;
branches;
next	1.45;

1.45
date	2012.09.28.15.18.50;	author root;	state Exp;
branches;
next	1.44;

1.44
date	2012.09.28.06.54.24;	author root;	state Exp;
branches;
next	1.43;

1.43
date	2012.09.28.05.44.24;	author root;	state Exp;
branches;
next	1.42;

1.42
date	2012.09.28.05.25.03;	author root;	state Exp;
branches;
next	1.41;

1.41
date	2012.09.27.20.51.57;	author root;	state Exp;
branches;
next	1.40;

1.40
date	2012.09.27.20.21.27;	author root;	state Exp;
branches;
next	1.39;

1.39
date	2012.09.26.22.39.20;	author root;	state Exp;
branches;
next	1.38;

1.38
date	2012.09.24.21.37.11;	author root;	state Exp;
branches;
next	1.37;

1.37
date	2012.09.24.21.32.29;	author root;	state Exp;
branches;
next	1.36;

1.36
date	2012.08.30.17.42.56;	author root;	state Exp;
branches;
next	1.35;

1.35
date	2012.08.30.17.30.20;	author root;	state Exp;
branches;
next	1.34;

1.34
date	2012.04.19.23.50.30;	author root;	state Exp;
branches;
next	1.33;

1.33
date	2010.07.22.21.57.05;	author james;	state Exp;
branches;
next	1.32;

1.32
date	2010.06.30.21.35.25;	author james;	state Exp;
branches;
next	1.31;

1.31
date	2010.06.28.16.54.54;	author james;	state Exp;
branches;
next	1.30;

1.30
date	2010.06.25.21.29.39;	author james;	state Exp;
branches;
next	1.29;

1.29
date	2010.06.25.21.20.56;	author james;	state Exp;
branches;
next	1.28;

1.28
date	2010.06.25.01.48.49;	author james;	state Exp;
branches;
next	1.27;

1.27
date	2010.06.24.23.58.07;	author james;	state Exp;
branches;
next	1.26;

1.26
date	2010.06.24.20.48.11;	author james;	state Exp;
branches;
next	1.25;

1.25
date	2010.06.24.18.51.01;	author james;	state Exp;
branches;
next	1.24;

1.24
date	2010.06.24.00.50.27;	author james;	state Exp;
branches;
next	1.23;

1.23
date	2010.06.23.21.03.28;	author james;	state Exp;
branches;
next	1.22;

1.22
date	2010.06.22.21.11.43;	author james;	state Exp;
branches;
next	1.21;

1.21
date	2010.06.22.04.33.24;	author james;	state Exp;
branches;
next	1.20;

1.20
date	2010.06.22.03.52.47;	author james;	state Exp;
branches;
next	1.19;

1.19
date	2010.06.22.01.32.39;	author james;	state Exp;
branches;
next	1.18;

1.18
date	2010.06.20.23.10.16;	author james;	state Exp;
branches;
next	1.17;

1.17
date	2010.06.20.20.26.53;	author james;	state Exp;
branches;
next	1.16;

1.16
date	2010.06.20.06.39.40;	author james;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.20.05.25.20;	author james;	state Exp;
branches;
next	1.14;

1.14
date	2010.06.20.03.35.36;	author james;	state Exp;
branches;
next	1.13;

1.13
date	2010.06.20.03.32.39;	author james;	state Exp;
branches;
next	1.12;

1.12
date	2010.06.19.23.55.27;	author james;	state Exp;
branches;
next	1.11;

1.11
date	2010.06.16.21.18.40;	author james;	state Exp;
branches;
next	1.10;

1.10
date	2010.06.14.21.15.30;	author james;	state Exp;
branches;
next	1.9;

1.9
date	2010.06.10.22.41.35;	author james;	state Exp;
branches;
next	1.8;

1.8
date	2010.06.10.18.44.28;	author james;	state Exp;
branches;
next	1.7;

1.7
date	2010.06.09.22.37.18;	author james;	state Exp;
branches;
next	1.6;

1.6
date	2010.06.09.22.01.47;	author james;	state Exp;
branches;
next	1.5;

1.5
date	2010.06.09.15.51.11;	author james;	state Exp;
branches;
next	1.4;

1.4
date	2010.06.09.04.24.40;	author james;	state Exp;
branches;
next	1.3;

1.3
date	2010.06.08.17.15.55;	author james;	state Exp;
branches;
next	1.2;

1.2
date	2010.06.08.16.12.13;	author james;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.08.01.39.07;	author james;	state Exp;
branches;
next	;


desc
@Initial check-in of ncc_xml_import.php
@


1.57
log
@Add horizontal rule above and below nav_button block
@
text
@<?

define( 'DEBUG', FALSE );

// why doesn't this work (FALSE OR ...)
$DEBUG = DEBUG || (isset( $_COOKIE[ 'TTVM_DEBUG' ] ) && ($_COOKIE[ 'TTVM_DEBUG' ] == 'TRUE'));
define( 'TEST_DB', $DEBUG );	// T = use test SQL database, F = use production database

define( 'CLI', FALSE );

define( 'MSG_LOG_NORMAL',  0 );
define( 'MSG_LOG_WARNING', 1 );
define( 'MSG_LOG_ERROR',   2 );

// Some error types that MSG_LOG can recognize (not very many yet)

define( 'ERR_UNSPEC',      0 );		// Type of error not specified
define( 'ERR_NO_NETWORK',  1 );		// Network not available
define( 'ERR_OTHER',       2 );		// Other error
define( 'ERR_UNKNOWN',     3 );		// Unknown error

// eventually we should support multiple operators, but
// for now, it's a constant:

define( 'OPERATOR_NAME', 'AdSystems' );
define( 'SALESMAN_NAME', 'Generic AdSystems' );

require_once( 'style.php' );
require_once( 'mysql_funcs.php' );
require_once( 'parse_xml.php' );
require_once( 'verify_xml.php' );
require_once( 'insert_sql.php' );


$msg_log = array();

function message_log_reset( &$p_msg_log )
{

	$p_msg_log = array();

} // message_log_reset


function message_log_format( $p_msg_log )
// return a string with the html-formatted message log
{

	$s = "";
	foreach ($p_msg_log as $log) {
		$msg = $log[0];
		$lvl = $log[1];
		if (strlen( $msg ) > 0) {
			switch (TRUE) {
			case ($lvl == MSG_LOG_WARNING):
				$p_tag = '<p class="warning">';
				break;
			case ($lvl == MSG_LOG_ERROR):
				$p_tag = '<p class="error">';
				break;
			default: // default to normal
				$p_tag = '<p>';
			} // switch
			$s .= $p_tag . $msg . "</p>\n";
		} // if strlen
	} // foreach
	return( $s );

} // message_log_format


function message_log_table( $p_msg_log )
// return a string with the html table-formatted message log
{

	$s = '';
	foreach ($p_msg_log as $log) {
		$msg = $log[0];
		$lvl = $log[1];
		if (strlen( $msg ) > 0) {
			switch (TRUE) {
			case ($lvl == MSG_LOG_WARNING):
				$p_tag = '<td class="warning">';
				break;
			case ($lvl == MSG_LOG_ERROR):
				$p_tag = '<td class="error">';
				break;
			default: // default to normal
				$p_tag = '<td>';
			} // switch
			$s .= "<tr>" . $p_tag . $msg . "</td></tr>\n";
		} // if strlen
	} // foreach
	$s = (strlen( $s ) ? "<table>$s</table>\n" : '');
	return( $s );

} // message_log_table


function message_log_append( &$p_msg_log, $msg, $level = MSG_LOG_NORMAL, $errno = ERR_UNSPEC )
{

	$p_msg_log[] = array( $msg, $level, $errno );

} // message_log_append


function current_state()

////////////////////////////////////////////
//
// Return the value of client's session 
// state variable.
//
////////////////////////////////////////////

{
	return( isset( $_SESSION[ 'state_value' ] ) ? $_SESSION[ 'state_value' ] : NULL );
} // current_state



function next_state( $p_state )

////////////////////////////////////////////
//
// Update the client's session so that the
// state variable is set to $p_state
//
////////////////////////////////////////////

{
GLOBAL $msg_log;
GLOBAL $DEBUG;
	$_SESSION[ "state_value" ] = $p_state;
if ($DEBUG) message_log_append( $msg_log, "state changed to $p_state\n" );
} // next_state



function prompt_for_xml_input()

////////////////////////////////////////////
//
// Display a page which prompts the user
// to browse the local web client's disk
// system and upload an XML file containing
// an NCC order.
//
////////////////////////////////////////////

{

	$xml_prompt_page = "upload-prompt.html";
	readfile( $xml_prompt_page );

} // prompt_for_xml_input


function nav_buttons( $p_keys = NULL, $p_import = FALSE, 
			$p_headers = NULL, $p_cont_key = NULL )

// return a string containing HTML buttons which will allow the 
// client to navigate through the contract array, or cancel.
// if $p_cont_key is passed and if it points to a contract
// with ERROR-level log messages, a delete button will appear.
// If no errors are detected in any of the contract verification
// logs, and if $p_import is TRUE, then an Import button will
// be presented.  This should mean that the Import and Delete
// buttons will never both appear.

// $p_keys can be an array of contract keys to display, or NULL.
// Each contract key will be displayed as a clickable button
// to display that contract.  If NULL, we won't display any
// clickable contract buttons.

// $p_headers is optional.  If passed, we'll examine the ['MSG_LOG']
// element and treat it as an array of message_logs, where each 
// message_log is an array of log entries [0]=message, [1]=loglevel.
// We'll note the highest loglevel found, and style the nav button 
// for that contract 'warn_button' if the highest loglevel is 
// MSG_LOG_WARNING, or 'error_button' if it is MSG_LOG_ERROR.

{
	$s  = '<form action="form_handler.php" method="GET">';
	$s .= "\n<div>\n";

// condense the header logs to a single maximum loglevel per contract.
// also find the highest loglevel and total spots in the entire campaign.
// $camp_loglevel and $camp_spots will remain 0 if $p_headers is not
// passed.

	$camp_spots    = 0;	// total spots in the entire campaign
	$camp_loglevel = 0;	// highest loglevel in the entire campaign
	$p_loglevel = array();

	if (is_array( $p_headers )) {
		foreach (array_keys( $p_headers ) as $key) {
			$hdr = $p_headers[ $key ];
			$camp_spots += $hdr[ 'total_spots' ];
			$j = 0;
			foreach ($hdr['MSG_LOG'] as $log) {
				foreach ($log as $msg) {
					if ($msg[1] > $j) $j = $msg[1];
					if ($msg[1] > $camp_loglevel) $camp_loglevel = $msg[1];
				} // foreach
			} // foreach
			$p_loglevel[ $key ] = $j;
		} // foreach
	} // if is_array

	if (is_array( $p_keys )) {

		$syscode_list = array();	// to build a drop-down list
		$buttons = "";
		$j = 0;
		foreach ($p_keys as $key) {
			$syscode_list[ $key ] = $syscode = $p_headers[ $key ]['SysCode'];
//			$buttons .= '<label for="' . $key . '">' .
//					$key . $key . '</label>' . "\n";
			switch (TRUE) {
			case (is_null( $p_headers[ $key ] )):
			case ($p_headers[ $key ][ 'detail_spots' ] == 0):
				$style = 'class="blank_button" '; // defined in style.php
				break;
			case ($p_loglevel[ $key ] == MSG_LOG_WARNING):
				$style = 'class="warn_button" '; // defined in style.php
				break;
			case ($p_loglevel[ $key ] == MSG_LOG_ERROR):
				$style = 'class="error_button" '; // defined in style.php
				break;
			default:
				$style = 'class="good_button" '; // defined in style.php
				break;
			} // switch
			$style .= 'style="height: 35px; width: 35px" ';
			$buttons .= '<input type="submit" name="action" ' .
					'title="SysCode ' . $syscode . '" ' .
					$style .
					'id="' . $key . '" ' .
					'value="' . $key . '" ' .
					'>';
			if (++$j % 25 == 0) $buttons .= '<br>';
		} // foreach

		$syscode_dropdown = ':';
		if (asort( $syscode_list )) {
			$syscode_dropdown = " or select a SysCode: " .
						"<select name=\"syscode\">\n";
			foreach ($syscode_list as $key => $syscode) {
				$selected = ($p_cont_key === $key)
						? ' selected="selected"' 
						: '';
				$syscode_dropdown .= "<option$selected value=$key>" .
					"$syscode</option>\n";
			}
			$syscode_dropdown .= "</select>&nbsp;";
			$syscode_dropdown .= "<input type=\"submit\" name=\"action\" " . 
						"value=\"Select\">\n";
		} // if

		$s .= "<br>Click a contract button$syscode_dropdown<br><hr>$buttons<br><hr>\n";

		$prevnext  = "<input type=\"submit\" name=\"action\" value=\"Prev\">\n";
		$prevnext .= "<input type=\"submit\" name=\"action\" value=\"Next\">\n";

		$p_delete = !is_null( $p_cont_key );
		if ($p_delete)
			$p_delete = (isset( $p_loglevel[ $p_cont_key ] ) &&
					($p_loglevel[ $p_cont_key ] >= MSG_LOG_ERROR));

		$p_delete = TRUE;	// always allow delete
		if ($p_delete || (isset( $_COOKIE[ 'TTVM_DEBUG' ] ) && ($_COOKIE[ 'TTVM_DEBUG' ] == 'TRUE'))) {
			$prevnext .= "<input type=\"submit\" name=\"action\" " .
					"value=\"Delete Contract\">\n";
		}

		$p_import = $p_import && ($camp_spots > 0);
		if ($p_import && ($camp_loglevel < MSG_LOG_ERROR)) {
			$prevnext .= "<input type=\"submit\" name=\"action\" value=\"Import\">\n";
		}

	} else {

		$prevnext = "";

	} // if is_array

	$s .= "<input type=\"submit\" name=\"action\" value=\"Cancel\">\n";
	$s .= $prevnext;

	$s .= "</div>\n</form>\n";

	return( $s );

} // nav_buttons


function customer_warn( $p_campaign, &$p_msg_log )
{
        if (is_null( $p_campaign[ 'Customer Record' ] )) {
                $cu_name = $p_campaign[ 'Customer Name' ];
                message_log_append( $p_msg_log, "Customer name '$cu_name' not found -- " . 
			"A NEW CUSTOMER will be created", MSG_LOG_WARNING );
        }
} // customer_warn


function agency_warn( $p_campaign, &$p_msg_log )
{
        if (is_null( $p_campaign[ 'Agency Record' ] )) {
                $ag_name = $p_campaign[ 'Agency Name' ];
                message_log_append( $p_msg_log, "Agency name '$ag_name' not found -- " . 
			"A NEW AGENCY will be created", MSG_LOG_WARNING );
        }
} // agency_warn


function verify_campaign( &$campaigns, $headers, $details )

//  $campaigns could be modified, but $headers and $details will not be
//  we'll log any errors/warnings found into $campaigns[0]['MSG_LOG']

{
	$success = TRUE;
	message_log_reset( $msg_log );	// use a local $msg_log

	customer_warn( $campaigns[0], $msg_log ); // warn if customer will be auto-created
	agency_warn(   $campaigns[0], $msg_log ); // warn if agency   will be auto-created

	if ($campaigns[0]['StartDate'] > $campaigns[0]['EndDate']) {
		$success = FALSE;
		message_log_append( $msg_log, 
			"Campaign start date is beyond the end date", 
			MSG_LOG_ERROR );
	}

// Verify total spots and total cost on the campaign.

// For TelAmerica, all detail sums to the contract totals, and all
// contracts sum to the campaign totals.

// For NCC, the detail sums to the contract totals, but the contracts
// do not necessarily sum to the campaign totals.

	$cam_spots = 0;	// across entire campaign
	$cam_cost  = 0;	// across entire campaign

	$keys = array_keys( $details );

	foreach ($keys as $key) {

	    foreach ($details[ $key ] as $ln) {

		$cam_spots += $ln[ 'nOrdered' ];
// calculate values with binary precision arithmetic routines
		$v = bcmul( bcmul( $ln[ 'nOrdered' ], $ln[ 'UnitPrice' ], 2 ), '0.01', 2 );
		$cam_cost = bcadd( $cam_cost, $v, 2 );

	    } // foreach line item in the contract detail

	} // foreach detail key (contract) in the campaign

	$cust_name = $campaigns[0]['Customer Name'];

// Add 'detail_spots' and 'detail_cost' fields to campaign array.
// These fields will hold the total spots and costs as summed from
// individual contract headers.  These should agree with 'total_spots'
// and 'total_cost' but we will check that.

	$campaigns[ 0 ][ 'detail_spots' ] = $cam_spots;
	$campaigns[ 0 ][ 'detail_cost' ]  = $cam_cost;

// If NCC, we have to fudge the campaign totals or they won't match.
	if ($cust_name === 'NCC') {
		$campaigns[ 0 ][ 'total_spots' ] = $cam_spots;
		$campaigns[ 0 ][ 'total_cost'  ] = $cam_cost;
	} // if NCC

	$campaigns[0]['MSG_LOG'] = $msg_log;

} // verify_campaign


function html_campaign( $p_camp )
// format a campaign header $p_camp[0] for HTML display
{
  $html = <<<EOF
  <table width="750">
  <tr>
    <td width="10%"></td>
    <td width="10%"></td>
    <td width="10%"></td>
    <td width="10%"></td>
    <td width="10%"></td>
    <td width="10%"></td>
    <td width="10%"></td>
    <td width="10%"></td>
    <td width="10%"></td>
    <td width="10%"></td>
  </tr>
EOF;

  $cust_html_class = is_null( $p_camp[0]['Customer Record'] ) ? "class='warning' " : '';
  $agcy_html_class = is_null( $p_camp[0]['Agency Record'] ) ? "class='warning' " : '';

  $html .= "<tr>" .
		"<td colspan=5 $cust_html_class>Customer: " . $p_camp[0]['Customer Name'] . 
		"</td>" .
		"<td colspan=5 $agcy_html_class>Agency: " . $p_camp[0]['Agency Name'] . 
		"</td>" .
	   "</tr>\n";

  $html .= "<tr><td colspan=5>Campaign ID " . $p_camp[0]['CampKeyID'] . 
//		" (ver " . $p_camp[0]['CampKeyVer'] . ")" .
		"</td>" . 
		"<td colspan=5>" . $p_camp[0]['contract_name'] . "</td>" .
	   "</tr>\n";

  $html .= "<tr><td colspan=5>Order # " . $p_camp[0]['CustOrder'] . 
//		" (ver " . $p_camp[0]['CampOrderKeyVer'] . ")" .
		"</td>" . 
		"<td colspan=5>Order Date " . $p_camp[0]['UpdateDate'] . "</td>" .
	   "</tr>\n";

  $html .= "<tr><td colspan=5>Flight Dates: " .
		$p_camp[0]['StartDate'] . ' -> ' . $p_camp[0]['EndDate'] . '</td>' . 
		"<td colspan=5>MakeGood Policy: " . $p_camp[0]['MakeGoodPolicy'] . '</td>' .
	   "</tr>\n";

  $total_html_class = '';
  if (bccomp( $p_camp[0][ 'total_spots' ], $p_camp[0][ 'detail_spots' ], 2 ) != 0) 
	$total_html_class = " class='error'";
  if (bccomp( $p_camp[0][ 'total_cost' ], $p_camp[0][ 'detail_cost' ], 2 ) != 0) 
	$total_html_class = " class='error'";

  $html .= "<tr><td colspan=5 $total_html_class>Campaign totals: " .
		$p_camp[0]['total_spots'] . ' spots, $' . $p_camp[0]['total_cost'] . 
		'</td>' . "<td colspan=5 $total_html_class>Detail totals: " . 
		$p_camp[0]['detail_spots'] . ' spots, $' . $p_camp[0]['detail_cost'] . 
		'</td>' . 
	   "</tr>\n";

  $html .= "</table>\n";

  $html .= message_log_format( $p_camp[0]['MSG_LOG'] );

  return( $html );

} // html_campaign


function html_order( $p_head, $p_num )
// format an order header $p_head for HTML display
{
  $html = <<<EOF
  <table width="750">
  <tr>
    <td width="10%"></td>
    <td width="10%"></td>
    <td width="10%"></td>
    <td width="10%"></td>
    <td width="10%"></td>
    <td width="10%"></td>
    <td width="10%"></td>
    <td width="10%"></td>
    <td width="10%"></td>
    <td width="10%"></td>
  </tr>
EOF;

  $html .= "<tr><td colspan=2>Contract #" . $p_num . "</td>" .
		"<td colspan=3>System Order " . $p_head['SystemOrder'] . "</td>" .
		"<td colspan=5>Syscode/Sitename: " .
		$p_head['SysCode'] . ' / ' . $p_head['SiteName'] . "</td>" .
	   "</tr>\n";

  $total_html_class = '';
  if (bccomp( $p_head[ 'total_spots' ], $p_head[ 'detail_spots' ], 2 ) != 0)
    $total_html_class = " class='error'";
  if (bccomp(  $p_head[ 'total_cost' ], $p_head[ 'detail_cost' ], 2 ) != 0) 
    $total_html_class = " class='error'";

  $html .= "<tr><td colspan=5 $total_html_class>Contract totals: " .
		$p_head['total_spots'] . ' spots, $' . $p_head['total_cost'] . 
		'</td>' . "<td colspan=5 $total_html_class>Detail totals: " . 
		$p_head['detail_spots'] . ' spots, $' . $p_head['detail_cost'] . 
		'</td>' . 
	   "</tr>\n";

  $html .= "</table>\n";

  $j = 0;
  foreach ($p_head['MSG_LOG'] as $log) {
//$html .= "<p>Log group " . ++$j . ":</p>\n";
    $html .= message_log_table( $log );
  }

  return( $html );

} // html_order


function html_detail( $p_detail, $p_num )
// format an order's detail array $p_detail for HTML display
{
  $html = "<table width=\"750\" columns=\"10\">
";

  $html .= "<tr>";
  $html .= "  <th class=\"left\">Line #</th>";	// 1
  $html .= "  <th class=\"left\">Time</th>";	// 2
  $html .= "  <th class=\"left\">WkDays</th>";	// 3
  $html .= "  <th class=\"left\">Net</th>";	// 4
  $html .= "  <th class=\"left\">Distrib</th>";	// 5
  $html .= "  <th class=\"right\">Price</th>";	// 6
  $html .= "  <th class=\"right\">Value</th>";	// 7
  $html .= "</tr>
";

  foreach ($p_detail as $p_det) {
    $ln  = "  <tr>\n";
    $ln .= "    <td>" . $p_det[ 'LineID' ] . "</td>\n";
    $ln .= "    <td>" . 
	substr( $p_det[ 'StartDate' ], 5 ) . ' - ' . 
	substr( $p_det[ 'EndDate' ],   5 ) . ' / ' .
	$p_det[ 'TimeOn' ] . ' - ' . $p_det[ 'TimeOff' ] . 
	"</td>\n";
// Here we might translate DayMask 'YYYYNYY' or similar to 
// MoTuWeTh--SaSu or similar
    $ln .= "    <td>" . $p_det[ 'DayMask' ] . "</td>\n";
    $ln .= "    <td>" . $p_det[ 'Network' ] . "</td>\n";
    $ln .= "    <td>" . $p_det[ 'Distribution' ] . "</td>\n";
    $price = bcmul( $p_det['UnitPrice'], '0.01', 2 );
    $ln .= "    <td class=\"right\">" . $price . "</td>\n";
    $ln .= "    <td class=\"right\">" . $p_det[ 'Value' ] . "</td>\n";
    $ln .= "  </tr>\n";
    if (isset( $p_det[ 'MSG_LOG' ] )) {
      $button = '';
      foreach ($p_det['MSG_LOG'] as $p_log) {
	if ($p_log[2] == ERR_NO_NETWORK) {
	  $style  = 'class="error_button" ';
	  $button = '<a href="form_handler.php?' . 
			'action=DelNet' . '&' .
			'LineID=' . $p_det['LineID'] . '" ' .
			'class="error" ' . 
			'title="Delete Network ' . $p_det['Network'] . '" ' .
			'>&nbsp;Delete&nbsp;</a>';
	  break;
	} // if
      } // foreach
      $ln .= "  <tr><td>$button</td>\n";
      $ln .= "    <td colspan=6>" . message_log_table( $p_det['MSG_LOG'] ) . "</td>\n";
      $ln .= "  </tr>\n";
    }
    $html .= $ln;
  }

  $html .= "</table>\n";

  return( $html );

} // html_detail


////////////////////////////////////////////
//
// Given one contract's detail lines, and a
// LineID, copy all detail lines that do not
// match that LineID.  Return the copied array
// (which will not contain the detail lines
// which matched the LineID given).  Array
// indices begin at 0.
//
// We must set $p_spots to the total number
// of spots deleted and $p_value to their
// total value.
//
////////////////////////////////////////////

function delete_detail_lineid( $p_details, $p_lineID, &$p_spots, &$p_value )
{
	$kept = array();  // the array rows we will keep
	$p_spots = 0;
	$p_value = 0;
	foreach ($p_details as $p_row) {
		if ($p_row[ 'LineID' ] == $p_lineID) {
			$p_spots += $p_row[ 'nOrdered' ];
			$p_value  = bcadd( $p_value, $p_row[ 'Value' ], 2 );
		} else {
			$kept[] = $p_row;
		} // if
	} // foreach
	return( $kept );
} // delete_detail_lineid


////////////////////////////////////////////
//
// Given one contract's detail lines, and a
// Network, copy all detail lines that do not
// match that Network.  Return the copied array
// (which will not contain the detail lines
// which matched the Network given).  Array
// indices begin at 0.
//
// We will set $p_spots to the total number
// of spots deleted and $p_value to their
// total value.
//
////////////////////////////////////////////

function delete_detail_network( $p_details, $p_network, &$p_spots, &$p_value )
{
	$kept = array();  // the array rows we will keep
	$p_spots = 0;
	$p_value = 0;
	foreach ($p_details as $p_row) {
		if ($p_row[ 'Network' ] == $p_network) {
			$p_spots += $p_row[ 'nOrdered' ];
			$p_value  = bcadd( $p_value, $p_row[ 'Value' ], 2 );
		} else {
			$kept[] = $p_row;
		} // if
	} // foreach
	return( $kept );
} // delete_detail_network


function next_cont_key( $p_cont_key, $p_keys)
{
	if (is_null( $p_cont_key )) $p_cont_key = $p_keys[0];
	else {
		$i = array_search( $p_cont_key, $p_keys );
		$next = $i+1;
		if (isset( $p_keys[ $next ] )) 
			$p_cont_key = $p_keys[ $next ];
	} // if
	return( $p_cont_key );
} // next_cont_key


function prev_cont_key( $p_cont_key, $p_keys)
{
	if (is_null( $p_cont_key )) $p_cont_key = $p_keys[0];
	else {
		$i = array_search( $p_cont_key, $p_keys );
		$prev = $i-1;
		if (isset( $p_keys[ $prev ] )) 
			$p_cont_key = $p_keys[ $prev ];
	} // if
	return( $p_cont_key );
} // prev_cont_key


function process_state( $ps_state )

////////////////////////////////////////////
//
// A basic state machine.
//
// Given the $ps_state value passed, perform
// the action dictated by that state.
//
////////////////////////////////////////////

{
GLOBAL $argv;
GLOBAL $msg_log;
GLOBAL $db_host, $db_user, $db_pwd, $db_name;
GLOBAL $DEBUG;

	$done = FALSE;

// $cont_key is an integer 1 .. N of the contract number 
// we'll display.  It indexes the arrays $headers and $details

	$cont_key  = isset( $_SESSION[ 'cont_key'  ] ) ? $_SESSION[ 'cont_key'  ] : NULL;
	$campaigns = isset( $_SESSION[ 'campaigns' ] ) ? $_SESSION[ 'campaigns' ] : NULL;
	$headers   = isset( $_SESSION[ 'headers'   ] ) ? $_SESSION[ 'headers'   ] : NULL;
	$details   = isset( $_SESSION[ 'details'   ] ) ? $_SESSION[ 'details'   ] : NULL;

// loop until we reach a state where the user (web client)
// must perform an action to determine what the next state
// will be.

	output_style_header();

	do {

		message_log_reset( $msg_log );
if ($DEBUG)
message_log_append( $msg_log, "database name is $db_name\n" );
if ($DEBUG)
message_log_append( $msg_log, "state is $ps_state\n" );

		switch (TRUE) {

/////////////////////////////////
//
//  Initial state is BEGIN
//
/////////////////////////////////

			case ($ps_state == 'BEGIN'):
//  Clear all keys in array $_SESSION
				foreach (array_keys( $_SESSION ) as $sess_key) {
					unset( $_SESSION[ $sess_key ] );
				} // foreach
//  Proceed to a prompting state
				next_state( 'PROMPT_FOR_XML_INPUT' );
				break;


/////////////////////////////////
//
//  Prompt the user to provide an
//  XML file.
//
/////////////////////////////////

			case ($ps_state == 'PROMPT_FOR_XML_INPUT'):
// We are ready to prompt for an input file
if (CLI) {
// In CLI mode, the input file name will be on the command line.
} else {
				prompt_for_xml_input();
}

//  The next step is to check the XML file for basic sanity checks
				next_state( 'CHECK_XML_FILENAME' );
//  But first we have to wait for the web client to upload the file
				$done = TRUE;
if (CLI) {
$done = FALSE;
}
				break;


/////////////////////////////////
//
//  Do some basic checking on the
//  XML file the user provided.
//
/////////////////////////////////

			case ($ps_state == 'CHECK_XML_FILENAME'):
				$input_nam = 'xmlfile'; // per the POST form
				$filnam = isset( $_FILES[ $input_nam ] ) ? 
						 $_FILES[ $input_nam ][ 'name' ] : NULL;
// The full path to where the file was uploaded on the server
				$filtmp = isset( $_FILES[ $input_nam ] ) ? 
						 $_FILES[ $input_nam ][ 'tmp_name' ] : NULL;
				if (is_null( $filnam ) || is_null( $filtmp ) ||
						(strlen( $filnam ) == 0) ||
						(strlen( $filtmp ) == 0)) {
					next_state( 'BEGIN' );
				} else {
					next_state( 'CHECK_XML_UPLOAD' );
				}
				break;


			case ($ps_state == 'CHECK_XML_UPLOAD'):
if (CLI) {
$filtmp = $argv[1];
echo "input file is $filtmp\n";
}
// The size of the file in bytes
				$filsiz = $_FILES[ $input_nam ][ 'size' ];
// The error code of the upload process
				$filerr = $_FILES[ $input_nam ][ 'error' ];
				if (CLI || $filerr == UPLOAD_ERR_OK) {
					next_state( 'PARSE_XML_UPLOAD' );
				} else {
					message_log_append( $msg_log, "Upload error $filerr", MSG_LOG_ERROR );
					$done = TRUE;
					next_state( 'BEGIN' );	// start over
				}
				break;


/////////////////////////////////
//
//  Do a full parsing of the
//  XML file the user provided.
//
/////////////////////////////////

			case ($ps_state == 'PARSE_XML_UPLOAD'):
				open_mysql();
//  What is the path portion of the $filtmp filename?
				$_SESSION[ 'xmlfile' ] = $filtmp;
if ($DEBUG) {
echo "calling parse_xml<br>\n";
echo "parsing file: $filtmp<br>\n";
}
//  Set state to start over, in case we fail before parse_xml
// returns.
				next_state( 'BEGIN' );
// parse the XML file, returning an array of contract headers,
// and an array of arrays of detail lines.  First-order indices of 
// headers and details arrays will be integers starting from 1.
				if (parse_xml( $filtmp, $campaigns, $headers, $details )) {
					next_state( 'VERIFY_CAMPAIGN' );
				} else {
					message_log_append( $msg_log, "XML order parsing failed", MSG_LOG_ERROR );
					unset( $_SESSION[ 'campaigns' ] );
					unset( $_SESSION[ 'headers'   ] );
					unset( $_SESSION[ 'details'   ] );
					next_state( 'TRY_AGAIN' );
				}
				break;


/////////////////////////////////
//
//  Verify some basic integrity
//  checks on the data, and create
//  human-readable log messages for
//  problems that are identified.
//
/////////////////////////////////

			case ($ps_state == 'RE-VERIFY_CAMPAIGN'):
// unset all header row MSG_LOG values
				foreach (array_keys( $headers ) as $key)
				    unset( $headers[ $key ][ 'MSG_LOG' ] );
// unset all detail line MSG_LOG values
				foreach (array_keys( $details ) as $dkey)
				    foreach (array_keys( $details[ $dkey ] ) as $ln)
					unset( $details[ $dkey ][ $ln ][ 'MSG_LOG' ] );
// and fall through to VERIFY_CAMPAIGN:

			case ($ps_state == 'VERIFY_CAMPAIGN'):
				verify_campaign( $campaigns, $headers, $details );
				next_state( 'BEGIN' );	// as precaution
//echo "calling verify_all_contracts<br>";
				if (verify_all_contracts( $campaigns, $headers, $details )) {
//echo "vac succeeded<br>";
				} else {
//echo "vac failed<br>";
				}
				next_state( ($ps_state == 'VERIFY_CAMPAIGN')
					? 'DISPLAY_CAMPAIGN'
					: 'DISPLAY_CONTRACT' );
				break;


			case ($ps_state == 'DISPLAY_CAMPAIGN'):
				unset( $cont_key );	// contract array key
				next_state( 'DISPLAY_CONTRACT' );
				break;


			case ($ps_state == 'DISPLAY_CONTRACT'):
//echo "$ps_state<br>";
				if (is_null( $campaigns ) ||
				    is_null( $headers   ) || is_null( $details   )) {
				    next_state( 'BEGIN' );
				} else {
				    if (!isset( $cont_key ) || is_null( $cont_key )) {
					$keys = array_keys( $headers );
					$cont_key = $keys[0];
				    } // if
				    if (is_null( $cont_key )) {
					next_state( 'BEGIN' );
				    } else {
					echo html_campaign( $campaigns );
					echo nav_buttons( array_keys( $headers ), 
							  TRUE,
							  $headers,
							  $cont_key );
					echo html_order( $headers[$cont_key], $cont_key );
					echo html_detail( $details[$cont_key], $cont_key );
// set a safe next state.  form_handler ought to override, unless error.
					next_state( 'BEGIN' );
					$done = TRUE;
				    } //if
				} // if
				break;


			case ($ps_state == 'DISPLAY_NEXT'):
				$keys = array_keys( $headers );
				$cont_key = next_cont_key( $cont_key, $keys );
// we might someday use a better state than BEGIN here.  A NULL
// return from next_cont_key would mean that no contracts remain.
				next_state( is_null( $cont_key ) ? 'BEGIN' 
								 : 'DISPLAY_CONTRACT' );
				break;


			case ($ps_state == 'DISPLAY_PREV'):
				$keys = array_keys( $headers );
				$cont_key = prev_cont_key( $cont_key, $keys );
				next_state( is_null( $cont_key ) ? 'BEGIN' 
								 : 'DISPLAY_CONTRACT' );
				break;


/////////////////////////////////
//
//  Push SQL file out to
//  the web client for download.
//
/////////////////////////////////

			case ($ps_state == 'PUSH_SQL_FILE'):
				next_state( 'BEGIN' );
if (CLI) {
echo "SQL output is in file $sql_file\n";
} else {
				header( 'Content-type: application/force-download' );
    				header( 'Content-Transfer-Encoding: Binary' );
    				header( 'Content-length: ' . filesize( $sql_file ) );
    				header( 'Content-disposition: attachment; filename="' .
						basename( $sql_file ) . '"' );
    				readfile( $sql_file );

				unlink( $sql_file );   // delete
}
				$done = TRUE;
				break;


/////////////////////////////////
//
//  Connect to the SQL server and
//  move the data into the database.
//
/////////////////////////////////

			case ($ps_state == 'IMPORT'):
				next_state( 'BEGIN' );
				open_mysql();
				insert_sql( $campaigns, $headers, $details );
				echo message_log_format( $msg_log );
				message_log_reset( $msg_log );
				break;


/////////////////////////////////
//
//  Delete a LineID from a contract
//
/////////////////////////////////

			case ($ps_state == 'DELETE_LINE'):
				$lineID	   = $_SESSION[ 'LineID'    ];  // XML LineID number
//message_log_append( $msg_log, 'You requested to delete LineID ' . $lineID . ' from contract key ' . $cont_key );

// Deleting detail lines will change the header spot and value totals.
// delete_detail_lineid is responsible for telling us how many spots
// were deleted, and what their total value was.
				$spots = 0;
				$value = 0;
				$details[ $cont_key ] = delete_detail_lineid( 
					$details[ $cont_key ], $lineID, $spots, $value );

// subtract deleted spots and value from header 'detail_*' totals
				$headers[ $cont_key ][ 'detail_spots' ] -= $spots;
				$v = $headers[ $cont_key ][ 'detail_cost' ];
				$v = bcsub( $v, $value, 2 );
				$headers[ $cont_key ][ 'detail_cost' ] = $v;

// subtract deleted spots and value from header 'total_*' totals
				$headers[ $cont_key ][ 'total_spots' ] -= $spots;
				$v = $headers[ $cont_key ][ 'total_cost' ];
				$v = bcsub( $v, $value, 2 );
				$headers[ $cont_key ][ 'total_cost' ] = $v;

// subtract deleted spots and value from campaign 'detail_*' totals
				$campaigns[0][ 'detail_spots' ] -= $spots;
				$v = $campaigns[0][ 'detail_cost' ];
				$v = bcsub( $v, $value, 2 );
				$campaigns[0][ 'detail_cost' ] = $v;

// subtract deleted spots and value from campaign 'total_*' totals
				$campaigns[0][ 'total_spots' ] -= $spots;
				$v = $campaigns[0][ 'total_cost' ];
				$v = bcsub( $v, $value, 2 );
				$campaigns[0][ 'total_cost' ] = $v;

// Now re-validate everything, and re-display this
// specific contract.
				next_state( 'RE-VERIFY_CAMPAIGN' );
				break;


/////////////////////////////////
//
//  Delete a Network from a contract
//
/////////////////////////////////

			case ($ps_state == 'DELETE_NETWORK'):
next_state( 'BEGIN' );
				$lineID	   = $_SESSION[ 'LineID'    ];  // XML LineID number
				$network   = NULL;
				foreach ($details[ $cont_key ] as $det) {
					if ($det[ 'LineID' ] === $lineID) {
						$network = $det[ 'Network' ];
//echo "<pre>"; var_dump( $det ); echo "</pre>";
						break;
					}
				}

				next_state( 'RE-VERIFY_CAMPAIGN' );
				if (is_null( $network)) {
message_log_append( $msg_log, 'Invalid LineID: ' . $lineID . ' not found in contract key ' . $cont_key );
					break;
				}

// Deleting detail lines will change the header spot and value totals.
// delete_detail_network is responsible for telling us how many spots
// were deleted, and what their total value was.
				$spots = 0;
				$value = 0;
				$details[ $cont_key ] = delete_detail_network( 
					$details[ $cont_key ], $network, $spots, $value );

// subtract deleted spots and value from header 'detail_*' totals
				$headers[ $cont_key ][ 'detail_spots' ] -= $spots;
				$v = $headers[ $cont_key ][ 'detail_cost' ];
				$v = bcsub( $v, $value, 2 );
				$headers[ $cont_key ][ 'detail_cost' ] = $v;

// subtract deleted spots and value from header 'total_*' totals
				$headers[ $cont_key ][ 'total_spots' ] -= $spots;
				$v = $headers[ $cont_key ][ 'total_cost' ];
				$v = bcsub( $v, $value, 2 );
				$headers[ $cont_key ][ 'total_cost' ] = $v;

// subtract deleted spots and value from campaign 'detail_*' totals
				$campaigns[0][ 'detail_spots' ] -= $spots;
				$v = $campaigns[0][ 'detail_cost' ];
				$v = bcsub( $v, $value, 2 );
				$campaigns[0][ 'detail_cost' ] = $v;

// subtract deleted spots and value from campaign 'total_*' totals
				$campaigns[0][ 'total_spots' ] -= $spots;
				$v = $campaigns[0][ 'total_cost' ];
				$v = bcsub( $v, $value, 2 );
				$campaigns[0][ 'total_cost' ] = $v;

				message_log_append( $msg_log, 
					'Network ' . $network . 
					' deleted from contract ' . $cont_key );

// Now re-validate everything, and re-display this
// specific contract.
				next_state( 'RE-VERIFY_CAMPAIGN' );
				break;


/////////////////////////////////
//
//  Delete an entire contract
//
/////////////////////////////////

			case ($ps_state == 'DELETE_CONTRACT'):
//message_log_append( $msg_log, 'You requested to delete contract ' . $cont_key );

// Unset the individual detail lines for this contract.
				$dkeys = array_keys( $details[ $cont_key ] );
				foreach ($dkeys as $key) {
					unset( $details[ $cont_key ][ $key ] );
				}

// subtract contract spots and value from campaign 'detail_*' totals
				$spots = $headers[ $cont_key ][ 'detail_spots' ];
				$value = $headers[ $cont_key ][ 'detail_cost'  ];
				$campaigns[0][ 'detail_spots' ] -= $spots;
				$v = $campaigns[0][ 'detail_cost' ];
				$v = bcsub( $v, $value, 2 );
				$campaigns[0][ 'detail_cost' ] = $v;

// subtract contract spots and value from campaign 'total_*' totals
				$spots = $headers[ $cont_key ][ 'total_spots' ];
				$value = $headers[ $cont_key ][ 'total_cost'  ];
				$campaigns[0][ 'total_spots' ] -= $spots;
				$v = $campaigns[0][ 'total_cost' ];
				$v = bcsub( $v, $value, 2 );
				$campaigns[0][ 'total_cost' ] = $v;

// Set the contract header to show 0 spots, 0 value.
				$spots = 0;
				$value = 0;
				$headers[ $cont_key ][ 'detail_spots' ] = $spots;
				$headers[ $cont_key ][ 'detail_cost'  ] = $value;
				$headers[ $cont_key ][ 'total_spots'  ] = $spots;
				$headers[ $cont_key ][ 'total_cost'   ] = $value;

// Unset the 'versionN' fields of deleted contracts so that version
// problems don't prevent the remaining contracts from being imported.
				$j = 0;
				$done = FALSE;
				while (!$done) {
					$fld = 'version' . (++$j);
					$done = !isset( $headers[ $cont_key ][ $fld ] );
					unset( $headers[ $cont_key ][ $fld ] );
				} // while

// auto-advance to next contract
				$done = FALSE;
				$keys = array_keys( $headers );
				$cont_key = next_cont_key( $cont_key, $keys );
// we might someday use a better state than BEGIN here.  A NULL
// return from next_cont_key would mean that no contracts remain.
				next_state( is_null( $cont_key ) ? 'BEGIN' 
								 : 'RE-VERIFY_CAMPAIGN' );
				break;


/////////////////////////////////
//
//  Dummy stub.
//
/////////////////////////////////

			case ($ps_state == 'DEAD_END'):
			case ($ps_state == 'STOP'):
				echo $ps_state;
				next_state( 'BEGIN' );
				$done = TRUE;
				break;


/////////////////////////////////
//
//  Screen has error messages.
//  Force user to go back and retry.
//
/////////////////////////////////

			case ($ps_state == 'TRY_AGAIN'):
				next_state( 'BEGIN' );
				echo nav_buttons( NULL, FALSE );	// Cancel only
				$done = TRUE;
				break;


/////////////////////////////////
//
//  State is unknown or invalid.
//  Go back to BEGIN state.
//
/////////////////////////////////

			default:
				message_log_append( $msg_log, 
					'Invalid state label: ' . $ps_state, MSG_LOG_ERROR );
				next_state( 'BEGIN' );
				$done = TRUE;

		} // switch

		$ps_state = current_state();

//		echo message_log_format( $msg_log );
		echo message_log_table( $msg_log );

	} while (!$done);

	$_SESSION[ 'campaigns' ] = $campaigns;
	$_SESSION[ 'headers'   ] = $headers;
	$_SESSION[ 'details'   ] = $details;
	$_SESSION[ 'cont_key'  ] = $cont_key;

} // process_state


function output_html_head()
// can we put up a 'loading' indicator?
{
echo '<html>
<head>
<title></title>
<script language="javascript">
function toggle(e) {
if (e.style.display == "none") {
e.style.display = "";
} else {
e.style.display = "none";
}
}
</script>
</head>
<body onload="toggle(progress)">
<div id="progress">Animation/Text/What Ever Here</div>
';
} // output_html_head


function main()
{
GLOBAL $argv;

	if (CLI || session_start()) {

//output_html_head();
// what state are we in with the current session?

		if (is_null( current_state() )) next_state( "BEGIN" );
		process_state( current_state() );

//echo '</body>
//</html>
//';
	} else {

		echo "SESSION_START has failed -- are cookies enabled in your browser?<br>\n";

	} // if session_start

} // main



main();

?>
@


1.56
log
@widen contract buttons from 30 to 35 px; change detail delete logic so that
deleting a line with an invalid network ID deletes all line items on that contract
that have the same network ID.
@
text
@d262 1
a262 1
		$s .= "<br>Click a contract button$syscode_dropdown<br>$buttons<br>\n";
@


1.55
log
@initialize TEST_DB to same value as $DEBUG; show
database name in message log when in $DEBUG mode.
@
text
@d160 2
a161 2
function nav_buttons( $p_keys = null, $p_import = FALSE, 
			$p_headers = null, $p_cont_key = NULL )
d172 1
a172 1
// $p_keys can be an array of contract keys to display, or null.
d174 1
a174 1
// to display that contract.  If null, we won't display any
d236 1
a236 1
			$style .= 'style="height: 30px; width: 30px" ';
d544 1
a544 1
			'action=DelLn' . '&' .
d547 1
a547 1
			'title="Delete LineID ' . $p_det['LineID'] . '" ' .
d598 32
d993 66
@


1.54
log
@remove display of CampKeyVer and CampOrderKeyVer fields
@
text
@a3 1
define( 'TEST_DB', FALSE );	// T = use test SQL database, F = use production database
d7 1
d661 2
@


1.53
log
@switch to use production database
@
text
@d415 2
a416 1
		" (ver " . $p_camp[0]['CampKeyVer'] . ")</td>" . 
d421 2
a422 1
		" (ver " . $p_camp[0]['CampOrderKeyVer'] . ")</td>" . 
@


1.52
log
@Display Campaign Key Version, Campaign Order Key Version,
Campaign Order Key Update Date; unset the 'versionN' fields
of deleted contracts so that version problems don't prevent
the remaining contracts from being imported.
@
text
@d4 1
a4 1
define( 'TEST_DB', TRUE );	// T = use test SQL database, F = use production database
@


1.51
log
@at line 823, treat unset $cont_key the same as null $cont_key
@
text
@d414 2
a415 1
  $html .= "<tr><td colspan=5>Order # " . $p_camp[0]['CustOrder'] . "</td>" . 
d419 5
a768 3
if ($DEBUG) {
echo "success from parse_xml<br>";
}
d994 10
d1005 1
@


1.50
log
@Add support for a drop-down button to select by syscode;
commented-out experimental code for a page-loading indicator.
@
text
@d823 1
a823 1
				    if (is_null( $cont_key )) {
@


1.49
log
@set $p_delete to always enable contract delete; output message_log
after insert_sql call.
@
text
@d214 1
d218 1
d238 1
a238 1
					'title="SysCode ' . $p_headers[ $key ]['SysCode'] . '" ' .
d245 18
a262 1
		$s .= "View contract:<br>$buttons<br>\n";
d1059 22
d1087 1
d1093 3
@


1.48
log
@add new TEST_DB constant to control test/production SQL database selection;
remove a null if statement at line 271; make 'Delete Contract' state
advance to next contract after deleting.
@
text
@d253 2
a254 1
		if ($p_delete) {
d880 2
@


1.47
log
@Lots more work, looking very nice.  Implement DELETE_CONTRACT state
and also create RE-VALIDATE_CAMPAIGN to leverage commonalities
with the already existing VALIDATE_CAMPAIGN state;  much clean-up
of old commented-out code, convert quotes to single quotes where
possible, improve comment sections in the state engine section.
@
text
@d4 1
a271 3
	if ($p_import) {
	}

d969 7
a975 1
				next_state( 'RE-VERIFY_CAMPAIGN' );
@


1.46
log
@change spots/cost summing to sum all detail instead of
just contract summary checks, and sum into detail_spots and
detail_cost instead of old array keys contract_spots and
contract_cost.
@
text
@a4 2
//define( 'DEBUG', TRUE  );

a8 1
//define( 'CLI', TRUE );
a30 1
//require_once( 'ncc_write_sql.php' );
d49 17
a65 21
//	if (is_array( $p_msg_log )) {
//echo "mlf<br>\n";
//var_dump( $p_msg_log );  echo "<br>";
		foreach ($p_msg_log as $log) {
			$msg = $log[0];
			$lvl = $log[1];
			if (strlen( $msg ) > 0) {
				switch (TRUE) {
				case ($lvl == MSG_LOG_WARNING):
					$p_tag = '<p class="warning">';
					break;
				case ($lvl == MSG_LOG_ERROR):
					$p_tag = '<p class="error">';
					break;
				default: // default to normal
					$p_tag = '<p>';
				} // switch
				$s .= $p_tag . $msg . "</p>\n";
			} // if strlen
		} // foreach
//	} // if
d159 2
a160 1
function nav_buttons( $p_keys = null, $p_import = FALSE, $p_headers = null )
d162 8
a169 7
// return a string containing HTML to present a form 
// which will allow the client to navigate through the
// contract array, or cancel to re-upload a file, or 
// import the contracts in the array.  If no errors are 
// detected in the contract verification logs, and if 
// $p_import is TRUE, then an Import button will also be 
// presented.
a175 1

d188 6
a193 2
// also find the highest loglevel in the entire campaign.
	$camp_loglevel = 0;
d195 1
d199 1
d218 6
a223 2
			switch ($p_loglevel[ $key ]) {
			case (MSG_LOG_WARNING):
d226 1
a226 1
			case (MSG_LOG_ERROR):
d246 12
d413 1
a413 1
		'</td>' . "<td colspan=5 $total_html_class>Contract totals: " . 
a419 4
//echo "<pre>campaign:\n";
//var_dump( $p_camp[0] );
//echo "</pre>\n";

a451 5
//  $html .= "<tr><td colspan=3>Syscode: " . $p_head['SysCode'] . '</td>' . 
//		"<td colspan=7>Sitename: " . $p_head['SiteName'] .
//		"</td>" .
//	   "</tr>\n";

a466 5
//echo "<pre>header:\n";
//var_dump( $p_head );
//echo "</pre>\n";

//$html .= "header[$p_num] error log:<br>\n";
a491 1
//  $html .= "  <th class=\"right\">Log</th>";	// 8
a495 3
//echo "<pre>\n";
//var_dump( $p_det );
//echo "</pre>\n";
a556 2
//echo "<pre>ddl before: ";
//var_dump( $p_details );
a567 5
//echo "ddl spots deleted = $p_spots\n";
//echo "ddl value deleted = $p_value\n";
//echo "ddl kept rows from the original array: ";
//var_dump( $kept );
//echo "</pre>\n";
d572 26
d645 1
a645 1
			case ($ps_state == "BEGIN"):
d651 1
a651 1
				next_state( "PROMPT_FOR_XML_INPUT" );
d662 1
a662 1
			case ($ps_state == "PROMPT_FOR_XML_INPUT"):
d671 1
a671 1
				next_state( "CHECK_XML_FILENAME" );
d687 2
a688 2
			case ($ps_state == "CHECK_XML_FILENAME"):
				$input_nam = "xmlfile"; // per the POST form
d690 1
a690 1
						 $_FILES[ $input_nam ][ "name" ] : NULL;
d693 1
a693 1
						 $_FILES[ $input_nam ][ "tmp_name" ] : NULL;
d697 1
a697 1
					next_state( "BEGIN" );
d699 1
a699 1
					next_state( "CHECK_XML_UPLOAD" );
d704 1
a704 1
			case ($ps_state == "CHECK_XML_UPLOAD"):
d710 1
a710 1
				$filsiz = $_FILES[ $input_nam ][ "size" ];
d712 1
a712 1
				$filerr = $_FILES[ $input_nam ][ "error" ];
d714 1
a714 1
					next_state( "PARSE_XML_UPLOAD" );
d718 1
a718 1
					next_state( "BEGIN" );	// start over
d730 1
a730 1
			case ($ps_state == "PARSE_XML_UPLOAD"):
d740 1
a740 1
				next_state( "BEGIN" );
d748 1
a748 1
					next_state( "VERIFY_CAMPAIGN" );
d754 1
a754 1
					next_state( "TRY_AGAIN" );
d761 4
a764 5
//  Display the parsed campaign to
//  the user, highlighting any
//  anomalies between the campaign
//  order totals and the contract 
//  (systemOrder) totals.
d767 12
a778 1
			case ($ps_state == "VERIFY_CAMPAIGN"):
d780 1
a780 1
				next_state( "BEGIN" );	// as precaution
d787 3
a789 1
				next_state( "DISPLAY_CAMPAIGN" );
d793 1
a793 1
			case ($ps_state == "DISPLAY_CAMPAIGN"):
d795 1
a795 1
				next_state( "DISPLAY_CONTRACT" );
d799 1
a799 1
			case ($ps_state == "DISPLAY_CONTRACT"):
d803 1
a803 1
				    next_state( "BEGIN" );
d810 1
a810 1
					next_state( "BEGIN" );
d815 2
a816 1
							  $headers );
d820 1
a820 1
					next_state( "BEGIN" );
d827 7
a833 39
			case ($ps_state == "DISPLAY_NEXT"):
				if (is_null( $headers ) || is_null( $details )) {
				    next_state( "BEGIN" );
				} else {
				    $keys = array_keys( $headers );
				    if (is_null( $cont_key )) $cont_key = $keys[0];
				    if (is_null( $cont_key )) next_state( "BEGIN" );
				    else {
					$i = array_search( $cont_key, $keys );
					$next = $i+1;
					if (is_null( $keys[ $next ] )) {
						// there is no next.  don't change $cont_key
					} else {
						$cont_key = $keys[ $next ];
					} // if
					next_state( "DISPLAY_CONTRACT" );
				    } // if
				} // if
				break;


			case ($ps_state == "DISPLAY_PREV"):
				if (is_null( $headers ) || is_null( $details )) {
				    next_state( "BEGIN" );
				} else {
				    $keys = array_keys( $headers );
				    if (is_null( $cont_key )) $cont_key = $keys[0];
				    if (is_null( $cont_key )) next_state( "BEGIN" );
				    else {
					$i = array_search( $cont_key, $keys );
					$prev = $i-1;
					if ($i == 0) {
						// there is no prev.  don't change $cont_key
					} else {
						$cont_key = $keys[ $prev ];
					} // if
					next_state( "DISPLAY_CONTRACT" );
				    } // if
				} // if
d837 5
a841 14
/////////////////////////////////
//
//  Given the XML we've parsed,
//  pass the SQL header/detail
//  data to a routine which can
//  move it into the database.
//
/////////////////////////////////

			case ($ps_state == "INSERT_SQL_DATA"):
//				$sql = ncc_insert_sql( $header, $detail );
// after (attempting) to insert the data, let the user download the 
// script if they want to.
				next_state( "DEAD_END" );
d852 2
a853 2
			case ($ps_state == "PUSH_SQL_FILE"):
				next_state( "BEGIN" );
d857 5
a861 5
				header( "Content-type: application/force-download" );
    				header( "Content-Transfer-Encoding: Binary" );
    				header( "Content-length: " . filesize( $sql_file ) );
    				header( "Content-disposition: attachment; filename=\"" .
						basename( $sql_file ) . "\"" );
d872 2
a873 1
//  Import the SQL data.
d877 2
a878 2
			case ($ps_state == "IMPORT"):
				next_state( "BEGIN" );
a880 1
//				next_state( "BEGIN" );
d890 1
a890 1
			case ($ps_state == "DELETE_LINE"):
a900 2
//message_log_append( $msg_log, "spots deleted = $spots" );
//message_log_append( $msg_log, "value deleted = $value" );
d926 19
a944 16
// Now we should re-validate everything, and return to display
// this specific contract.  If we change state to VERIFY_XML, that
// will also proced to DISPLAY_CAMPAIGN which defaults the contract
// key to contract #1.
				next_state( "BEGIN" );	// as precaution
// unset all header row MSG_LOG values
				foreach (array_keys( $headers ) as $key)
					unset( $headers[ $key ][ 'MSG_LOG' ] );
// unset all detail line MSG_LOG values
				foreach (array_keys( $details ) as $dkey)
				  foreach (array_keys( $details[ $dkey ] ) as $ln)
				    unset( $details[ $dkey ][ $ln ][ 'MSG_LOG' ] );
				verify_campaign( $campaigns, $headers, $details );
//$DEBUG = TRUE;
				if (verify_all_contracts( $campaigns, $headers, $details )) {
				} else {
d947 25
a971 1
				next_state( "DISPLAY_CONTRACT" );
d981 2
a982 2
			case ($ps_state == "DEAD_END"):
			case ($ps_state == "STOP"):
d984 1
a984 1
				next_state( "BEGIN" );
d996 2
a997 2
			case ($ps_state == "TRY_AGAIN"):
				next_state( "BEGIN" );
a1010 1
//				echo $ps_state;
d1013 1
a1013 1
				next_state( "BEGIN" );
@


1.45
log
@Add emphasis to new Customer/Agency creation messages;
style those messages with 'warning' class instead of 'error';
formalize code which unsets all detail line MSG_LOG entries
before re-validating contracts after deleting detail lines.
@
text
@d316 1
a316 1
	$keys = array_keys( $headers );
d320 1
a320 2
		$cam_spots += $headers[ $key ][ 'total_spots' ];
		$cam_cost   = bcadd( $cam_cost, $headers[ $key ][ 'total_cost' ], 2 );
d322 8
a329 1
	} // foreach header key (contract) in the campaign
d333 1
a333 1
// Add 'contract_spots' and 'contract_cost' fields to campaign array.
d338 2
a339 2
	$campaigns[ 0 ][ 'contract_spots' ] = $cam_spots;
	$campaigns[ 0 ][ 'contract_cost' ]  = $cam_cost;
d391 1
a391 1
  if (bccomp( $p_camp[0][ 'total_spots' ], $p_camp[0][ 'contract_spots' ], 2 ) != 0) 
d393 1
a393 1
  if (bccomp( $p_camp[0][ 'total_cost' ], $p_camp[0][ 'contract_cost' ], 2 ) != 0) 
d399 1
a399 1
		$p_camp[0]['contract_spots'] . ' spots, $' . $p_camp[0]['contract_cost'] . 
d928 3
a930 3
// subtract deleted spots and value from campaign 'contract_*' totals
				$campaigns[0][ 'contract_spots' ] -= $spots;
				$v = $campaigns[0][ 'contract_cost' ];
d932 1
a932 1
				$campaigns[0][ 'contract_cost' ] = $v;
@


1.44
log
@improve if/then/else structure in DISPLAY_CONTRACT/DISPLAY_NEXT/DISPLAY_PREV
@
text
@d270 2
a271 2
                message_log_append( $p_msg_log, "Customer name '$cu_name' " .
                                "not found, will be created", MSG_LOG_WARNING );
d280 2
a281 2
                message_log_append( $p_msg_log, "Agency name '$ag_name' " .
                                "not found, will be created", MSG_LOG_WARNING );
d365 2
a366 2
  $cust_html_class = is_null( $p_camp[0]['Customer Record'] ) ? " class='error'" : '';
  $agcy_html_class = is_null( $p_camp[0]['Agency Record'] ) ? " class='error'" : '';
d368 5
a372 2
  $html .= "<tr><td colspan=5$cust_html_class>Customer: " . $p_camp[0]['Customer Name'] . "</td>" .
		"<td colspan=5$agcy_html_class>Agency: " . $p_camp[0]['Agency Name'] . "</td>" .
d939 1
d942 4
a945 8
//foreach (array_keys( $details ) as $cont_detail)
//foreach (array_keys( $details[ $cont_detail ] ) as $key)
//{
////echo "<pre>cont # $cont_detail, det # $key: ";
////var_dump( $details[ $cont_detail ][ $key ][ 'MSG_LOG' ] );
//unset( $details[ $cont_detail ][ $key ][ 'MSG_LOG' ] );
////echo "</pre>\n";
//}
@


1.43
log
@utilize new 'good_button' class.

@
text
@d592 3
d764 5
a768 12
				if (is_null( $campaigns ) || 
				    is_null( $headers   ) ||
				    is_null( $details   )) {
//echo "one of them is null<br>";
					next_state( "BEGIN" );
				} //if

// $cont_key is an integer 1 .. N of the contract number 
// we'll display.  It indexes the arrays $headers and $details

				if (is_null( $cont_key )) {
//echo "cont_key is null<br>";
d771 2
a772 3
				} // if
				if (is_null( $cont_key )) {
//echo "cont_key is still null<br>";
d774 1
a774 4
				} else {
//echo "<pre>";
//var_dump( $headers[ $cont_key ] );
//echo "</pre>\n";
a780 3
//echo "<pre>";
//var_dump( $headers[$cont_key]['MSG_LOG'] );
//echo "</pre>\n";
d784 2
a785 1
				} //if
d791 1
a791 9
//echo "one of them is null<br>";
					next_state( "BEGIN" );
				}
				$keys = array_keys( $headers );
				if (is_null( $cont_key )) {
					$cont_key = $keys[0];
				}
				if (is_null( $cont_key )) {
					next_state( "BEGIN" );
d793 4
d805 1
d812 1
a812 9
//echo "one of them is null<br>";
					next_state( "BEGIN" );
				}
				$keys = array_keys( $headers );
				if (is_null( $cont_key )) {
					$cont_key = $keys[0];
				}
				if (is_null( $cont_key )) {
					next_state( "BEGIN" );
d814 4
d826 1
@


1.42
log
@Much progress...  move all SESSION restore/saves to just before
(restore) or just after (save) the do/while in process_state;
use BC math when debit value from totals in DELETE_LINE state;
@
text
@d227 1
a227 1
				$style = '';
@


1.41
log
@modify message_log_append to support third array element
to store error number; other cosmetic/comment changes.
@
text
@d184 5
a188 5
// element and treat it as an array of
// log entries [0]=message, [1]=loglevel.  We'll note the highest
// loglevel found, and style the nav button for that contract 
// 'warn_button' if the highest loglevel is MSG_LOG_WARNING, or 
// 'error_button' if it is MSG_LOG_ERROR.
d191 2
a192 2
	$s  = "<form action=\"form_handler.php\" method=\"GET\">\n";
	$s .= "<div>\n";
d200 1
a200 1
			$hdr= $p_headers[ $key ];
d262 1
a291 2
//GLOBAL $msg_log;   // don't use the global anymore ....

d293 1
a293 1
	message_log_reset( $msg_log );	// ... use a local instead
a319 2
		$con_spots = 0;	// across one contract
		$con_cost  = 0;	// across one contract
d339 1
a339 23
	} // if TELAMERICA

// verify campaign sums here
	if (bccomp( $campaigns[ 0 ][ 'total_spots' ], $cam_spots, 2 ) != 0) {
		$s  = "Number of spots doesn't agree between campaign totals ";
		$s .= "(" . $campaigns[ 0 ][ 'total_spots' ] . ") ";
		$s .= "and contract headers";
		$s .= " (" . $cam_spots . ").";
		message_log_append( $msg_log, $s, MSG_LOG_ERROR );
		$success = FALSE;
	}
	if (bccomp( $campaigns[ 0 ][ 'total_cost' ], $cam_cost, 2 ) != 0) {
		$s  = "Total value doesn't agree between campaign totals ";
		$s .= "(" . $campaigns[ 0 ][ 'total_cost' ] . ") ";
		$s .= "and contract headers";
		$s .= " (" . $cam_cost . ").";
		message_log_append( $msg_log, $s, MSG_LOG_ERROR );
		$success = FALSE;
	}

//	message_log_append( $msg_log, "Total spots: " . $campaigns[0][ 'total_spots' ] );
//	message_log_append( $msg_log, "Total value: " .
//                                        sprintf( "%.02f", $campaigns[0][ 'total_cost' ] ) );
d438 1
a438 1
  if (bccomp( $p_head[ 'total_spots' ], $p_head[ 'contract_spots' ], 2 ) != 0) 
d440 1
a440 1
  if (bccomp(  $p_head[ 'total_cost' ], $p_head[ 'contract_cost' ], 2 ) != 0) 
d443 6
a448 6
//  $html .= "<tr><td colspan=5 $total_html_class>Campaign totals: " .
//		$p_head['total_spots'] . ' spots, $' . $p_head['total_cost'] . 
//		'</td>' . "<td colspan=5 $total_html_class>Contract totals: " . 
//		$p_head['contract_spots'] . ' spots, $' . $p_head['contract_cost'] . 
//		'</td>' . 
//	   "</tr>\n";
d457 5
a461 1
  $html .= message_log_table( $p_head['MSG_LOG'][0] );
a485 14
//  $html .= "<tr><td colspan=3>Syscode: " . $p_head['SysCode'] . '</td>' . 
//		"<td colspan=7>Sitename: " . $p_head['SiteName'] .
//		"</td>" .
//	   "</tr>\n";

//  $total_html_class = '';
//  if (bccomp( $p_head[ 'total_spots' ], $p_head[ 'contract_spots' ], 2 ) != 0) 
//    $total_html_class = " class='error'";
//  if (bccomp(  $p_head[ 'total_cost' ], $p_head[ 'contract_cost' ], 2 ) != 0) 
//    $total_html_class = " class='error'";

//$html .= "header[$p_num] error log:<br>\n";
//  $html .= message_log_format( $p_head['MSG_LOG'][0] );

d497 1
a497 1
// Here we should translate DayMask 'YYYYNYY' or similar to 
a504 3
//    $ln .= "    <td class=\"right\">" . 
//(isset( $p_det[ 'MSG_LOG' ] ) ? (is_null( $p_det[ 'MSG_LOG' ] ) ? 'NULL' : 'SET') : 'UNSET') .
//		"</td>\n";
d507 14
a520 1
      $ln .= "  <tr><td></td>\n";
d534 39
d592 5
d714 2
a715 2
// and an array of arrays of detail lines.  Indices of the 
// arrays will be integers starting from 1.
a719 3
					$_SESSION[ 'campaigns' ] = $campaigns;
					$_SESSION[ 'headers'   ] = $headers;
					$_SESSION[ 'details'   ] = $details;
a740 3
				$campaigns = $_SESSION[ 'campaigns' ];
				$headers   = $_SESSION[ 'headers'   ];
				$details   = $_SESSION[ 'details'   ];
a741 44
//echo html_campaign( $campaigns );

				$_SESSION[ 'campaigns' ] = $campaigns;
//				$_SESSION[ 'headers'   ] = $headers;
//				$_SESSION[ 'details'   ] = $details;
				next_state( "VERIFY_ORDERS" );
				break;


/////////////////////////////////
//
//  Display the parsed order to
//  the user, highlighting any
//  anomalies.  Let the user choose
//  how to proceed.
//
/////////////////////////////////

			case ($ps_state == "VERIFY_ORDERS"):
if ($DEBUG) {
echo "<pre>before:\n";
echo "campaigns = ";
var_dump( $campaigns );
echo "headers = ";
var_dump( $headers );
echo "details = ";
var_dump( $details );
}
				$campaigns = $_SESSION[ 'campaigns' ];
				$headers   = $_SESSION[ 'headers'   ];
				$details   = $_SESSION[ 'details'   ];
if ($DEBUG) {
echo "<pre>after:\n";
echo "campaigns = ";
var_dump( $campaigns );
echo "headers = ";
var_dump( $headers );
echo "details = ";
var_dump( $details );
echo "</pre>\n";
next_state( "BEGIN" );
die();
}
//				message_log_reset( $msg_log );
a745 1
					$errors_found = FALSE;
a747 1
					$errors_found = TRUE;
a748 3
//var_dump($headers);
// save the parsed arrays in the client's session info
//echo "saving campaign, headers and details<br>";
a749 3
				$_SESSION[ 'campaigns' ] = $campaigns;
				$_SESSION[ 'headers'   ] = $headers;
				$_SESSION[ 'details'   ] = $details;
d754 1
a754 1
				unset( $_SESSION[ 'cont_key' ] );	// contract array key
d760 1
a760 6
echo "DISPLAY_CONTRACT<br>";
//echo "retrieving campaign, headers and details<br>";
				$campaigns = $_SESSION[ 'campaigns' ];
				$headers   = $_SESSION[ 'headers'   ];
				$details   = $_SESSION[ 'details'   ];
				$cont_key  = $_SESSION[ 'cont_key'  ];	// contract index
d780 3
a786 1
					$_SESSION[ 'cont_key' ] = $cont_key;
d789 3
a799 3
				$headers  = $_SESSION[ 'headers' ];
				$details  = $_SESSION[ 'details' ];
				$cont_key = $_SESSION[ 'cont_key' ];	// contract index
d816 1
a816 1
						$_SESSION[ 'cont_key' ] = $keys[ $next ];
a823 3
				$headers  = $_SESSION[ 'headers' ];
				$details  = $_SESSION[ 'details' ];
				$cont_key = $_SESSION[ 'cont_key' ];	// contract index
d840 1
a840 1
						$_SESSION[ 'cont_key' ] = $keys[ $prev ];
a895 3
				$campaigns = $_SESSION[ 'campaigns' ];
				$headers   = $_SESSION[ 'headers'   ];
				$details   = $_SESSION[ 'details'   ];
d905 69
d1008 3
d1012 1
d1023 5
@


1.40
log
@Lots more work!  modify function message_log_table to ignore
empty error messages (strlen() == 0) when formatting the
message log table; these log entries will still serve to indicate
a warning or error status at the header level, mostly useful
for coloring the contract selection buttons; use 'MSG_LOG' instead
of 'Log' as per verify_xml.php; utilize 'warn_button' and
'error_button' style classes newly defined in style.php;
set fixed height and width of contract select buttons and print
them in a grid of 25 buttons per row, with a 'hover title' on
each button which shows the SysCode of each button's contract;
minor tweaks to some html_* functions, significant addition
to html_detail to display each detail line's error log
immediately below the detail line in question; remove the
obsolete 'ASK_TO_PROCEED' state engine label; change
message_log display to use message_log_table form.
@
text
@d20 1
a20 1
define( 'ERR_NO_NETWORK',  1 );		// Network not found
d107 1
a107 1
function message_log_append( &$p_msg_log, $msg, $level = MSG_LOG_NORMAL )
d110 1
a110 1
	$p_msg_log[] = array( $msg, $level );
d125 1
a125 1
	return( isset( $_SESSION[ "state_value" ] ) ? $_SESSION[ "state_value" ] : NULL );
d186 3
a188 2
// loglevel found, and color the nav button for that contract yellow
// if the highest loglevel is MSG_LOG_WARNING, or red if it is MSG_LOG_ERROR.
d194 2
a195 2
// condense the header logs to a single maximum loglevel per contract,
// and also on max loglevel per campaign.
d221 1
a221 1
				$style = 'class="warn_button" ';
d224 1
a224 1
				$style = 'class="error_button" ';
@


1.39
log
@Lots of work; add message_log_table function to format message logs
more tightly in a table format; remove code to sum order totals
since that is now done in a lower level and passed pack via
campaign and header array fields; add html_campaign, html_header
and html_detail functions to format array data into HTML display;
use the new html_* functions to display the data instead of the
old kludgey message_log method; clean up some state machine stuff
in the main state engine.
@
text
@d59 13
a71 11
			switch (TRUE) {
			case ($lvl == MSG_LOG_WARNING):
				$p_tag = '<p class="warning">';
				break;
			case ($lvl == MSG_LOG_ERROR):
				$p_tag = '<p class="error">';
				break;
			default: // default to normal
				$p_tag = '<p>';
			} // switch
			$s .= $p_tag . $msg . "</p>\n";
d83 1
a83 1
	$s = "<table>\n";
d87 13
a99 11
		switch (TRUE) {
		case ($lvl == MSG_LOG_WARNING):
			$p_tag = '<td class="warning">';
			break;
		case ($lvl == MSG_LOG_ERROR):
			$p_tag = '<td class="error">';
			break;
		default: // default to normal
			$p_tag = '<td>';
		} // switch
		$s .= "<tr>" . $p_tag . $msg . "</td></tr>\n";
d101 1
a101 1
	$s .= "</table>\n";
d183 1
a183 1
// $p_headers is optional.  If passed, we'll examine the ['Log']
a197 1
//echo "is_array<br>";
d201 1
a201 2
//var_dump( $hdr['Log'] ); echo "<br>---<br>";
			foreach ($hdr['Log'] as $log) {
a202 1
//var_dump( $msg ); echo "<br>";
a207 2
//echo "highest loglevel is $j<br>";
//echo "---<br>";
a208 1
//echo "<br>";
d214 1
a217 1
//echo "loglevel # $key is " . $p_loglevel[ $key ] . "<br>";
d220 1
a220 1
				$style = 'class="warning" ';
d223 1
a223 1
				$style = 'class="error" ';
d229 1
d231 1
d236 3
a238 2
		}
		$s .= "View contract: $buttons<br>\n";
d365 1
a365 1
	$campaigns[0]['Log'] = $msg_log;
d424 1
a424 1
  $html .= message_log_format( $p_camp[0]['Log'] );
d481 1
a481 1
  $html .= message_log_table( $p_head['Log'][0] );
d495 8
a502 8
  $html .= "  <th class=\"left\">Line #</th>";
  $html .= "  <th class=\"left\">Time</th>";
  $html .= "  <th class=\"left\">WkDays</th>";
  $html .= "  <th class=\"left\">Net</th>";
  $html .= "  <th class=\"left\">Distrib</th>";
  $html .= "  <th class=\"right\">Price</th>";
  $html .= "  <th class=\"right\">Value</th>";
  $html .= "  <th class=\"right\">Log</th>";
a516 11
//  $html .= "<tr><td colspan=5 $total_html_class>Campaign totals: " .
//		$p_head['total_spots'] . ' spots, $' . $p_head['total_cost'] . 
//		'</td>' . "<td colspan=5 $total_html_class>Contract totals: " . 
//		$p_head['contract_spots'] . ' spots, $' . $p_head['contract_cost'] . 
//		'</td>' . 
//	   "</tr>\n";

//echo "<pre>header:\n";
//var_dump( $p_head );
//echo "</pre>\n";

d518 1
a518 1
//  $html .= message_log_format( $p_head['Log'][0] );
d522 1
a522 1
//var_dump( array_keys( $p_det ));
d539 3
a541 2
    $ln .= "    <td class=\"right\">" . (is_null( $p_det[ 'Log' ] ) ? 'NULL' : 'LOG') .
		"</td>\n";
d543 5
a824 1
//							  FALSE,
a934 16
//  Present buttons for the client
//  to Cancel or Import
//
/////////////////////////////////

// this state is believed to be obsolete
			case FALSE && ($ps_state == "ASK_TO_PROCEED"):
//				$_SESSION[ 'sql_file' ] = $sql_file;
				next_state( "BEGIN" );
				echo nav_buttons();	// cancel or import
				$done = TRUE;
				break;


/////////////////////////////////
//
d992 2
a993 1
		echo message_log_format( $msg_log );
@


1.38
log
@add ERR_UNSPEC .. ERR_UNKNOWN constants; change customer_check and agency_check
to *_warn; change verify_campaign to use *_warn and keep error messages local.
@
text
@d77 26
d318 1
d321 14
a334 28
		foreach ($details[ $key ] as $det) {
			$con_spots += $det[ 'nOrdered' ];
// calculate values with binary precision arithmetic routines
//echo $det[ 'nOrdered' ] . " times " . $det[ 'UnitPrice' ] . "<br>\n";
			$v = bcmul( bcmul( $det[ 'nOrdered' ], $det[ 'UnitPrice' ], 2 ),
				'0.01', 2 );
			$con_cost = bcadd( $con_cost, $v, 2 );
		} // foreach
		$cam_spots += $con_spots;
		$cam_cost   = bcadd( $cam_cost, $con_cost, 2 );
// verify systemOrder sums here
		if (bccomp( $headers[ $key ][ 'total_spots' ], $con_spots, 2 ) != 0) {
			$success = FALSE;
			$s  = "Number of spots doesn't agree between contract header ";
			$s .= "(" . $headers[ $key ][ 'total_spots' ] . ") ";
			$s .= "and detail lines";
			$s .= " (" . $con_spots . ").";
			message_log_append( $msg_log, $s, MSG_LOG_ERROR );
		}
		if (bccomp( $headers[ $key ][ 'total_cost' ], $con_cost, 2 ) != 0) {
			$success = FALSE;
			$s  = "Total value doesn't agree between contract header ";
			$s .= "(" . $headers[ $key ][ 'total_cost' ] . ") ";
			$s .= "and detail lines";
			$s .= " (" . $con_cost . ").";
			message_log_append( $msg_log, $s, MSG_LOG_ERROR );
		}
	} // foreach
d336 2
a337 3
// If not TelAmerica, we have to fudge the campaign totals or
// they won't match.
	if (!$campaigns[ 0 ][ 'TELAMERICA' ]) {
d346 1
a346 1
		$s .= "and detail lines";
d349 1
d354 1
a354 1
		$s .= "and detail lines";
d357 1
d360 3
a362 3
	message_log_append( $msg_log, "Total spots: " . $campaigns[0][ 'total_spots' ] );
	message_log_append( $msg_log, "Total value: " .
                                        sprintf( "%.02f", $campaigns[0][ 'total_cost' ] ) );
a364 1
	message_log_reset( $msg_log );
d369 193
d751 25
a775 1
				message_log_reset( $msg_log );
a780 1
					next_state( "DISPLAY_CAMPAIGN" );
a783 1
					next_state( "DISPLAY_CAMPAIGN" );
d788 1
d796 1
a796 1
//echo $campaigns[ 0 ][ 'Log' ] . "<br>\n";
d802 1
d814 4
a819 1
//var_dump( $headers );
a820 1
//var_dump( $keys );
d822 1
a822 1
				} //if
d827 1
a827 1
echo message_log_format( $campaigns[ 0 ][ 'Log' ] ) . "<br>\n";
a831 1
//echo "saving cont_key $cont_key<br>";
d833 2
a834 3
echo "Contract $cont_key:<br>\n";
echo message_log_format( $headers[ $cont_key ][ 'Log' ][0] ) . "<br>\n";
//var_dump( $headers[ $cont_key ][ 'Log' ] );
@


1.37
log
@remove old TTVM_DEBUG cookie code; add code to save/restore/unset
variables based on $_SESSION array;
@
text
@d17 7
d237 1
a237 1
function customer_check( $p_campaign )
a238 1
GLOBAL $msg_log;
d241 1
a241 1
                message_log_append( $msg_log, "Customer name '$cu_name' " .
d244 1
a244 1
} // customer_check
d247 1
a247 1
function agency_check( $p_campaign )
a248 1
GLOBAL $msg_log;
d251 1
a251 1
                message_log_append( $msg_log, "Agency name '$ag_name' " .
d254 1
a254 1
} // agency_check
d258 4
d263 1
a263 1
GLOBAL $msg_log;
d266 1
d268 2
a269 10
	customer_check( $campaigns[0] );
	agency_check(   $campaigns[0] );

	message_log_append( $msg_log, "Customer: " . $campaigns[0]['Customer Name'
] );
	message_log_append( $msg_log, "Order Number: " . $campaigns[0]['CustOrder'] );
	message_log_append( $msg_log, "Contract Name: " . $campaigns[0]['ContractName'] );
	message_log_append( $msg_log, "Flight start / end: " .
			$campaigns[0]['StartDate'] . " / " . $campaigns[0]['EndDate'] );
	message_log_append( $msg_log, "Agency: " . $campaigns[0]['Agency Name'] );
d273 3
a275 1
		message_log_append( $msg_log, "Campaign start date is beyond the end date", MSG_LOG_ERROR );
@


1.36
log
@delete commented-out message_log() function.  Add a little
bit of whitespace in several places.
@
text
@a8 7
//echo "<pre>";
//var_dump( isset( $_COOKIE[ 'TTVM_DEBUG' ] ));
//var_dump( $_COOKIE[ 'TTVM_DEBUG' ] );
//var_dump( isset( $_COOKIE[ 'TTVM_DEBUG' ] ) && ($_COOKIE[ 'TTVM_DEBUG' ] == 'TRUE') );
//$DEBUG = (isset( $_COOKIE[ 'TTVM_DEBUG' ] ) && ($_COOKIE[ 'TTVM_DEBUG' ] == 'TRUE'));
//var_dump( $DEBUG );
//echo "</pre><br>\n";
d380 2
a381 1
if ($DEBUG) message_log_append( $msg_log, "state is $ps_state\n" );
a490 2
//var_dump( $campaigns );
//die();
d494 3
a496 3
//					$n = count( $headers );
//					message_log_append( $msg_log, $n . " contract" .
//						($n == 1 ? "" : "s") . " found." );
d500 3
d518 3
a520 1
				message_log_reset( $msg_log );
d522 5
@


1.35
log
@use 'isset' to avoid some 'invalid array subscript' warnings.
@
text
@a84 9
//function message_log()
//{
//GLOBAL $msg_log;
//
//	return( $msg_log );
//
//} // message_log


d157 1
a157 1
//if the highest loglevel is MSG_LOG_WARNING, or red if it is MSG_LOG_ERROR.
d406 1
d431 1
d455 1
d474 1
d512 1
d559 1
d565 1
d605 1
d632 1
d701 1
d717 1
d734 1
d748 1
d762 1
@


1.34
log
@no net changes, only DEBUG support.
@
text
@d104 1
a104 1
	return( $_SESSION[ "state_value" ] );
d448 2
a449 1
				$filnam = $_FILES[ $input_nam ][ "name" ];
d451 2
a452 1
				$filtmp = $_FILES[ $input_nam ][ "tmp_name" ];
@


1.33
log
@change detail nOrder field to nOrdered
@
text
@d4 1
d6 11
d120 1
d122 1
a122 1
if (DEBUG) message_log_append( $msg_log, "state changed to $p_state\n" );
d383 1
d396 1
a396 1
if (DEBUG) message_log_append( $msg_log, "state is $ps_state\n" );
d489 1
a489 1
if (DEBUG) {
d502 1
a502 1
if (DEBUG) {
@


1.32
log
@allow import only if no errors
@
text
@d294 1
a294 1
			$con_spots += $det[ 'nOrder' ];
d296 2
a297 2
//echo $det[ 'nOrder' ] . " times " . $det[ 'UnitPrice' ] . "<br>\n";
			$v = bcmul( bcmul( $det[ 'nOrder' ], $det[ 'UnitPrice' ], 2 ),
@


1.31
log
@handle detail unitprice in pennies (dollar cost * 100).
@
text
@d137 5
a141 2
// contract array, or cancel to re-upload a file, or
// import the contracts in the array.
a147 1
// if $p_import is TRUE, an Import Contract button will be enabled.
d159 3
a161 1
// condense the header logs to a single maximum loglevel per contract
d173 1
d211 1
a211 1
		if ($p_import) {
d692 1
@


1.30
log
@correct SALESMAN_NAME
@
text
@d292 2
a293 1
			$v = bcmul( $det[ 'nOrder' ], $det[ 'UnitPrice' ], 2 );
@


1.29
log
@add constant SALESMAN_NAME
@
text
@d16 1
a16 1
define( 'SALESMAN_NAME', 'AdSystems' );
@


1.28
log
@require insert_sql.php; add support for $p_import in nav_buttons();
pass campaigns, headers and details to insert_sql();
@
text
@d16 1
@


1.27
log
@lots of message_log_ debugging, move db_host etc. into mysql_funcs
@
text
@d22 1
a22 1
//require_once( 'ncc_insert_sql.php' );
d205 3
d570 2
a571 1
							  FALSE,
d699 3
d704 2
a705 1
				ncc_insert_sql();
@


1.26
log
@fixes to message_log routines.  unset() on a pass-by-reference parameter
in message_log_reset was the problem.
@
text
@d8 3
a10 3
define( 'LOG_NORMAL',  0 );
define( 'LOG_WARNING', 1 );
define( 'LOG_ERROR',   2 );
a16 10
if (CLI) {
$db_host = "127.0.0.1:3306";
} else {
$db_host = "localhost";
}
$db_user = "james";
$db_pwd  = "mysql";
$db_name = "james";


d47 1
a47 1
			case ($lvl == LOG_WARNING):
d50 1
a50 1
			case ($lvl == LOG_ERROR):
d64 1
a64 1
function message_log_append( &$p_msg_log, $msg, $level = 0 )
d132 1
a132 1
function nav_buttons( $p_keys, $p_import, $p_logs = null )
d141 2
a142 1
// to display that contract.
d146 2
a147 1
// $p_logs is optional.  If passed, we'll treat it as an array[N] of
d150 1
a150 1
//if the highest loglevel is LOG_WARNING, or red if it is LOG_ERROR.
d159 3
a161 1
		foreach ($p_headers as $hdr) {
d163 1
d165 4
a168 1
				if ($log[1] > $j) $j = $log[1];
d170 3
a172 1
			$p_loglevel[] = $j;
d174 1
d183 1
d185 1
a185 1
			case (LOG_WARNING):
d188 1
a188 1
			case (LOG_ERROR):
d230 1
a230 1
                                "not found, will be created", LOG_WARNING );
d241 1
a241 1
                                "not found, will be created", LOG_WARNING );
d265 1
a265 1
		message_log_append( $msg_log, "Campaign start date is beyond the end date", LOG_ERROR );
d300 1
a300 1
			message_log_append( $msg_log, $s, LOG_ERROR );
d308 1
a308 1
			message_log_append( $msg_log, $s, LOG_ERROR );
d325 1
a325 1
		message_log_append( $msg_log, $s, LOG_ERROR );
d332 1
a332 1
		message_log_append( $msg_log, $s, LOG_ERROR );
d448 1
a448 1
					message_log_append( $msg_log, "Upload error $filerr", LOG_ERROR );
d486 1
a486 1
					message_log_append( $msg_log, "XML order parsing failed", LOG_ERROR );
d566 3
a568 1
					echo nav_buttons( array_keys( $headers ), FALSE );
@


1.25
log
@change message_log support to array structure, where each array
row stores a message and a loglevel.
@
text
@d35 1
a35 24
function old_message_log_reset()
{
GLOBAL $msg_log;

	$msg_log = "";

} // old_message_log_reset


function old_message_log_append( $msg, $level = 0 )
{
GLOBAL $msg_log;

	switch (TRUE) {
	case ($level == LOG_WARNING):
		$p_tag = '<p class="warning">';
		break;
	case ($level == LOG_ERROR):
		$p_tag = '<p class="error">';
		break;
	default: // default to normal
		$p_tag = '<p>';
	} // switch
	$msg_log .= $p_tag . $msg . "</p>\n";
d37 1
a37 4
} // old_message_log_append


function old_message_log()
a38 1
GLOBAL $msg_log;
d40 1
a40 11
	return( $msg_log );

} // old_message_log


function message_log_reset()
{
GLOBAL $msg_log;

	unset( $msg_log );
	$msg_log = array();
d45 1
a45 1
function message_log_format( $msg_log )
d48 1
d50 19
a68 15
	foreach ($msg_log as $log) {
		$msg = $log[0];
		$lvl = $log[1];
		switch (TRUE) {
		case ($lvl == LOG_WARNING):
			$p_tag = '<p class="warning">';
			break;
		case ($lvl == LOG_ERROR):
			$p_tag = '<p class="error">';
			break;
		default: // default to normal
			$p_tag = '<p>';
		} // switch
		$s .= $p_tag . $msg . "</p>\n";
	} // foreach
d74 1
a74 1
function message_log_append( $msg, $level = 0 )
a75 1
GLOBAL $msg_log;
d77 1
a77 1
	$msg_log[] = array( $msg, $level );
d82 7
a88 7
function message_log()
{
GLOBAL $msg_log;

	return( $msg_log );

} // message_log
d116 1
d118 1
a118 1
if (DEBUG) message_log_append( "state changed to $p_state\n" );
d142 1
a142 1
function nav_buttons( $p_keys, $p_import )
d152 7
a158 2
// if $p_import is TRUE, an Import Contract button will be
// enabled.
d164 12
d182 11
d194 1
d224 1
d227 1
a227 1
                message_log_append( "Customer name '$cu_name' " .
d235 1
d238 1
a238 1
                message_log_append( "Agency name '$ag_name' " .
d246 1
d253 1
a253 1
	message_log_append( "Customer: " . $campaigns[0]['Customer Name'
d255 3
a257 3
	message_log_append( "Order Number: " . $campaigns[0]['CustOrder'] );
	message_log_append( "Contract Name: " . $campaigns[0]['ContractName'] );
	message_log_append( "Flight start / end: " .
d259 1
a259 1
	message_log_append( "Agency: " . $campaigns[0]['Agency Name'] );
d263 1
a263 1
		message_log_append( "Campaign start date is beyond the end date", LOG_ERROR );
d298 1
a298 1
			message_log_append( $s, LOG_ERROR );
d306 1
a306 1
			message_log_append( $s, LOG_ERROR );
d323 1
a323 1
		message_log_append( $s, LOG_ERROR );
d330 1
a330 1
		message_log_append( $s, LOG_ERROR );
d333 2
a334 2
	message_log_append( "Total spots: " . $campaigns[0][ 'total_spots' ] );
	message_log_append( "Total value: " .
d337 2
a338 2
	$campaigns[0]['Log'] = message_log();
	message_log_reset();
d356 1
d369 2
a370 2
		message_log_reset();
if (DEBUG) message_log_append( "state is $ps_state\n" );
d446 1
a446 1
					message_log_append( "Upload error $filerr", LOG_ERROR );
d480 1
a480 1
//					message_log_append( $n . " contract" .
d484 1
a484 1
					message_log_append( "XML order parsing failed", LOG_ERROR );
d499 1
a499 1
				message_log_reset();
d515 1
a515 1
				message_log_reset();
d736 1
a736 1
		echo message_log_format( message_log() );
d762 2
@


1.24
log
@assuming header Log is an array with a single element,
output only Log[0].
@
text
@d35 1
a35 1
function message_log_reset()
d41 1
a41 1
} // message_log_reset
d44 1
a44 1
function message_log_append( $msg, $level = 0 )
d60 52
d562 1
a562 1
echo $campaigns[ 0 ][ 'Log' ] . "<br>\n";
d567 1
a567 1
echo $headers[ $cont_key ][ 'Log' ][0] . "<br>\n";
d735 1
a735 1
		echo message_log();
@


1.23
log
@lots....  move customer_check and agency_check logic out
of verify_xml and into this file.
Move customer/order/flight date/contract name display out
of verify_xml and into this file.
improve checking of spots and value.  Only for TelAmerica contracts
do we verify contract sums against campaign totals.  NCC campaign
totals include amounts for other contracts not given to our systems.
Implement new DISPLAY_CAMPAIGN state to display campaign information
above nav buttons, with contract information below nav buttons.
@
text
@a203 1
//	message_log_append( "System Order Number: " . $campaigns[0]['SystemOrder'] );
a204 3
//	message_log_append( "Sitename / Syscode: " .
//			$campaigns[0]['SiteName'] . " / " .
//			$campaigns[0]['Site Record'][ 'SysCode' ] );
d515 2
a516 1
echo $headers[ $cont_key ][ 'Log' ] . "<br>\n";
@


1.22
log
@Revise spot/value validation code to validate TelAmerica campaigns
differently from other customers' campaigns.
@
text
@d150 1
a150 1
		$s .= "Jump to contract: $buttons<br>\n";
d173 21
a193 1
function verify_campaign( $campaigns, $headers, $details )
d198 15
d214 1
a214 1
		$success = TRUE;
d245 1
d253 1
d262 5
a266 16
// If TelAmerica, then verify campaign sums here
	if ($campaigns[ 0 ][ 'TELAMERICA' ]) {
		if (bccomp( $campaigns[ 0 ][ 'total_spots' ], $cam_spots, 2 ) != 0) {
			$s  = "Number of spots doesn't agree between campaign totals ";
			$s .= "(" . $campaigns[ 0 ][ 'total_spots' ] . ") ";
			$s .= "and detail lines";
			$s .= " (" . $cam_spots . ").";
			message_log_append( $s, LOG_ERROR );
		}
		if (bccomp( $campaigns[ 0 ][ 'total_cost' ], $cam_cost, 2 ) != 0) {
			$s  = "Total value doesn't agree between campaign totals ";
			$s .= "(" . $campaigns[ 0 ][ 'total_cost' ] . ") ";
			$s .= "and detail lines";
			$s .= " (" . $cam_cost . ").";
			message_log_append( $s, LOG_ERROR );
		}
d269 23
d450 1
d472 1
a472 1
					next_state( "DISPLAY_CONTRACT" );
d476 1
a476 1
					next_state( "DISPLAY_CONTRACT" );
d486 5
d514 1
@


1.21
log
@comment var_dump/die.  add $campaigns parameter to verify_all_contracts
function call.
@
text
@d176 17
a192 2
	$spots = 0;	// across entire campaign
	$cost  = 0;	// across entire campaign
d197 2
d200 1
a200 1
			$spots += $det[ 'nOrder' ];
d202 3
a204 2
			$value = bcmul( $det[ 'nOrder' ], $det[ 'UnitPrice' ], 2 );
			$cost = bcadd( $cost, $value, 2 );
d206 17
d225 17
a241 17
// at this point, $spots should equal $campaigns[ $contract_seq ][ 'total_spots' ]
// and $cost should equal $campaigns[ $contract_seq ][ 'total_value' ].

	if (bccomp( $campaigns[ 0 ][ 'total_spots' ], $spots, 2 ) != 0) {
		$s  = "Number of spots doesn't agree between campaign totals ";
		$s .= "(" . $campaigns[ 0 ][ 'total_spots' ] . ") ";
		$s .= "and detail lines";
		$s .= " (" . $spots . ").";
		message_log_append( $s, LOG_ERROR );
	}
	if (bccomp( $campaigns[ 0 ][ 'total_cost' ], $cost, 2 ) != 0) {
		$s  = "Total value doesn't agree between campaign totals ";
		$s .= "(" . $campaigns[ 0 ][ 'total_cost' ] . ") ";
		$s .= "and detail lines";
		$s .= " (" . $cost . ").";
		message_log_append( $s, LOG_ERROR );
	}
@


1.20
log
@*** empty log message ***
@
text
@d341 2
a342 2
var_dump( $campaigns );
die();
d384 1
a384 1
				if (verify_all_contracts( $headers, $details )) {
@


1.19
log
@clean up generation of nav_button forms.
@
text
@a71 1

d173 38
d340 3
a342 1
				if (parse_xml( $filtmp, $headers, $details )) {
d349 1
a349 1
					next_state( "VERIFY_ORDERS" );
d358 15
d395 4
a398 3
//echo "saving headers and details<br>";
				$_SESSION[ 'headers' ] = $headers;
				$_SESSION[ 'details' ] = $details;
d402 8
a409 5
//echo "retrieving headers and details<br>";
				$headers  = $_SESSION[ 'headers' ];
				$details  = $_SESSION[ 'details' ];
				$cont_key = $_SESSION[ 'cont_key' ];	// contract index
				if (is_null( $headers ) || is_null( $details )) {
@


1.18
log
@clean up state handling (many TRY_AGAIN changed to BEGIN);
create function to put a contract navigation banner at the
top of the contract display pages.  De-activate obsolete
ASK_TO_PROCEED state.
@
text
@d137 2
a138 1
	$s = '<form action="form_handler.php" method="GET">' . "\n";
d141 1
a151 1
	} // if
d153 11
a163 5
	$s .= '<div>
<input type="submit" name="action" value="Cancel">
<input type="submit" name="action" value="Prev">
<input type="submit" name="action" value="Next">
';
d302 1
a302 1
// arrays will be 'A' .. 'Z' nominally.
d329 1
d331 1
d335 1
@


1.17
log
@change xlm-prompt.html to upload-prompt.html
@
text
@d99 1
d123 44
d321 1
a321 1
				next_state( "TRY_AGAIN" );	// as precaution
d343 1
a343 1
					next_state( "TRY_AGAIN" );
d354 1
a354 1
					next_state( "TRY_AGAIN" );
d356 1
d361 3
a363 1
					next_state( "FORM_CANCEL_PREV_NEXT" );
a364 15

			case ($ps_state == "FORM_CANCEL_PREV_NEXT"):
				echo <<< __EOF__
<form action="form_handler.php" method="GET">
<div>
<input type="submit" name="action" value="Cancel">
<input type="submit" name="action" value="Prev">
<input type="submit" name="action" value="Next">
</div>
</form>
__EOF__;
//}
// set a safe next state.  form_handler ought to override, unless error.
				next_state( "TRY_AGAIN" );
				$done = TRUE;
d372 2
a373 2
echo "one of them is null<br>";
					next_state( "TRY_AGAIN" );
d380 1
a380 1
					next_state( "TRY_AGAIN" );
d398 2
a399 2
echo "one of them is null<br>";
					next_state( "TRY_AGAIN" );
d406 1
a406 1
					next_state( "TRY_AGAIN" );
d468 1
a468 1
			case ($ps_state == "ASK_TO_PROCEED"):
d471 1
a471 12
//if (CLI) {
//echo "SQL output is in file $sql_file\n";
//} else {
				echo <<< __EOF__
<form action="form_handler.php" method="GET">
<div>
<input type="submit" name="action" value="Cancel">
<input type="submit" name="action" value="Import Order">
</div>
</form>
__EOF__;
//}
d509 1
a509 7
				echo <<< __EOF__
<form action="form_handler.php" method="GET">
<div>
<input type="submit" name="action" value="Cancel">
</div>
</form>
__EOF__;
@


1.16
log
@improve next/prev logic and related fixes
@
text
@d116 1
a116 1
	$xml_prompt_page = "xml-prompt.html";
@


1.15
log
@Implement prev/next contract display.
@
text
@d255 3
a257 3
					$n = count( $headers );
					message_log_append( $n . " contract" .
						($n == 1 ? "" : "s") . " found." );
d276 1
a276 1
next_state( "TRY_AGAIN" );
d284 1
d286 1
a286 1
echo "saving headers and details<br>";
d292 1
a292 1
echo "retrieving headers and details<br>";
d297 1
a297 1
echo "one of them is null<br>";
d301 1
a301 1
echo "cont_key is null<br>";
d308 1
a308 1
echo "cont_key is still null<br>";
d311 1
a311 1
echo "saving cont_key $cont_key<br>";
d313 2
a314 1
echo "displaying contract $cont_key<br>\n";
@


1.14
log
@remove ncc_ prefixes
@
text
@d240 1
a240 11
				$tmpdir = dirname( $filtmp ); // e.g. "/tmp"
				$j = strlen( $tmpdir );
				// $tmpdir may need a slash appended
				if ($j == 0) {
				// empty path, no need to add a slash
				} elseif (substr( $tmpdir, -1 ) == "/") {
				// slash already there
				} else {
  					$tmpdir .= "/";
				}

d255 3
d275 2
d278 2
a279 1
//					next_state( "ASK_TO_PROCEED" );
d281 2
d284 98
a381 1
next_state( "TRY_AGAIN" );
d384 1
@


1.13
log
@change ncc_parse_xml to parse_xml
@
text
@d27 2
a28 2
require_once( 'ncc_style.php' );
require_once( 'ncc_mysql_funcs.php' );
@


1.12
log
@*** empty log message ***
@
text
@d29 1
a29 1
require_once( 'ncc_parse_xml.php' );
d252 1
a252 1
echo "calling ncc_parse_xml<br>\n";
d255 1
a255 1
//  Set state to start over, in case we fail before ncc_parse_xml
d261 1
a261 1
				if (ncc_parse_xml( $filtmp, $headers, $details )) {
d263 1
a263 1
echo "success from ncc_parse_xml<br>";
@


1.11
log
@add OPERATOR_NAME constant
@
text
@d27 6
a32 6
require( 'ncc_style.php' );
require( 'ncc_mysql_funcs.php' );
require( 'ncc_parse_xml.php' );
require( 'ncc_write_sql.php' );
require( 'ncc_verify_order.php' );
require( 'ncc_insert_sql.php' );
d73 1
a73 1
function prompt_for_xml_input()
d77 2
a78 4
// Display a page which prompts the user
// to browse the local web client's disk
// system and upload an XML file containing
// an NCC order.
d83 2
a85 2
	$xml_prompt_page = "xml-prompt.html";
	readfile( $xml_prompt_page );
a86 1
} // prompt_for_xml_input
d88 1
a88 2

function current_state()
d92 2
a93 2
// Return the value of client's session 
// state variable.
d98 2
a99 2
	return( $_SESSION[ "state_value" ] );
} // current_state
d103 1
a103 1
function next_state( $p_state )
d107 4
a110 2
// Update the client's session so that the
// state variable is set to $p_state
a114 2
	$_SESSION[ "state_value" ] = $p_state;
} // next_state
d116 4
d160 3
a162 5
				$sess_keys = array_keys( $_SESSION );
				$j = 0;
				while (!is_null( $sess_keys[ $j ] )) {
					unset( $_SESSION[ $sess_keys[ $j++ ] ] );
				} // while
d199 1
a199 1
				$input_nam = "ncc_xmlfile"; // per the POST form
a249 2
				$sqlheader = $tmpdir;
				$sqldetail = $tmpdir;
a253 1
echo "passing output files: $sqlheader $sqldetail<br>\n";
d258 4
a261 2
				if (ncc_parse_xml( $filtmp, 
						$sqlheader, $sqldetail, $order_num )) {
a263 1
echo "received output files: $sqlheader $sqldetail<br>\n";
d265 1
a265 1
					next_state( "VERIFY_ORDER" );
d281 6
a286 3
			case ($ps_state == "VERIFY_ORDER"):
				$sql = ncc_verify_order( $sqlheader, $sqldetail, $sql_file );
				next_state( "ASK_TO_PROCEED" );
d299 1
a299 1
//				$sql = ncc_insert_sql( $sqlheader, $sqldetail, $sql_file );
d344 1
a344 1
<form action="ncc_form_handler.php" method="GET">
d390 1
a390 1
<form action="ncc_form_handler.php" method="GET">
@


1.10
log
@change form action URL from fetchfile.php to ncc_form_handler.php
@
text
@d12 5
@


1.9
log
@Have state BEGIN clear all $_SESSION variables.
@
text
@d386 1
a386 1
<form action="fetchfile.php" method="GET">
@


1.8
log
@remove commented line in IMPORT state section
@
text
@d154 6
@


1.7
log
@*** empty log message ***
@
text
@a354 1
//				$done = TRUE;
@


1.6
log
@*** empty log message ***
@
text
@d355 1
a355 1
				$done = TRUE;
@


1.5
log
@clean up debug messages, wrap them in IF DEBUG conditionals
@
text
@d8 4
d22 2
d26 1
d39 1
a39 1
function message_log_append( $msg )
d43 11
a53 1
	$msg_log .= $msg;
d55 1
a55 1
} // message_log_reset
d64 1
a64 1
}
d130 1
d138 2
d215 1
a215 1
					log_message( "Upload error $filerr.\n" );
d229 1
d258 1
a258 2
//					next_state( "CREATE_SQL_FILE" );
					next_state( "INSERT_SQL_DATA" );
d260 2
a261 2
					log_message( "XML order parsing failed.\n" );
					$done = TRUE;
d267 4
a270 4
//  Given the XML we've parsed,
//  pass the SQL header/detail
//  data to a route which can
//  move it into the database.
d274 3
a276 5
			case ($ps_state == "INSERT_SQL_DATA"):
				$sql = ncc_insert_sql( $sqlheader, $sqldetail, $sql_file );
// after (attempting) to insert the data, let the user download the 
// script if they want to.
				next_state( "LINK_SQL_FILE" );
d282 3
a284 3
//  create a SQL script which
//  the user can download and
//  pump into a database.
d288 6
a293 7
// this state may now be obsolete
			case ($ps_state == "CREATE_SQL_FILE"):
				$sql_file = $tmpdir . "ncc-" . $order_num . ".sql";
				$sql = ncc_write_sql( $sqlheader, $sqldetail, $sql_file );

				unlink( $sqlheader );	// delete
				unlink( $sqldetail );	// delete
a294 2
				next_state( "LINK_SQL_FILE" );
				break;
d298 1
a298 1
//  Push that SQL file out to
a304 1
				$file = $sql_file;
d306 1
a306 1
echo "SQL output is in file $file\n";
d310 1
a310 1
    				header( "Content-length: " . filesize( $file ) );
d312 2
a313 2
						basename( $file ) . "\"" );
    				readfile( $file );
d322 26
a347 2
//  Present a link to the file for 
//  the web client to download.
d351 12
a362 1
			case ($ps_state == "LINK_SQL_FILE"):
d364 4
a367 8
				$file = $sql_file;
if (CLI) {
echo "SQL output is in file $file\n";
} else {
        			$download_page = "sql-download.html";
        			readfile( $download_page );
}
				$_SESSION[ 'sql_file' ] = $file;
d369 10
d380 8
d404 1
a404 1
		echo "<PRE>" . message_log() . "</PRE>\n";
@


1.4
log
@*** empty log message ***
@
text
@d121 3
a123 2
message_log_reset();
message_log_append( "state is $ps_state\n" );
d341 1
a341 1
echo "<PRE>" . message_log() . "</PRE>\n";
@


1.3
log
@*** empty log message ***
@
text
@d20 28
a113 4
//if (TRUE || DEBUG) {
//echo "ps_entry: " . $ps_state . "<br>";
//}

d121 2
a122 4

//if (TRUE || DEBUG) {
//echo "ps_loop: " . $ps_state . "<br>";
//}
a151 3
if (FALSE && DEBUG) {
echo "I'm waiting for you to upload the file.<br>\n";
}
a188 2
// The mime-type of the file, as forged by the user
				$filtyp = $_FILES[ $input_nam ][ "type" ];
a191 3
if (DEBUG) {
echo "No error.<br>\n";
}
a192 10
if (FALSE && DEBUG) {
echo <<< __EOF__
The upload error code was $filerr.<br>
You uploaded a file that you named $filnam.<br>
I stored it in a temp file named $filtmp.<br>
It is $filsiz bytes in size.<br>
Its mime-type is $filtyp.<br>
<br>
__EOF__;
}
d194 1
a194 3
if (DEBUG) {
echo "Upload error $filerr.<br>\n";
}
d227 3
d236 2
a237 1
					next_state( "CREATE_SQL_FILE" );
d239 1
a239 4
if (DEBUG) {
echo "failure from ncc_parse_xml<br>";
}
					next_state( "BEGIN" );
d247 16
d264 2
a265 2
//  will bring that data into
//  a database.
d269 1
a276 6
//				echo "<br>Your SQL code:<br><br>\n";
//				echo "<pre>\n";
//				echo $sql;
//				echo "</pre>\n";

//				$done = TRUE;
d288 1
a302 2
echo "after push, state is " . $ps_state . "\n";
				next_state( "BEGIN" );
d340 1
a340 1
//echo "ps_endswitch: " . $ps_state . "<br>";
a342 1
//echo "ps_exit: " . current_state() . "<br>";
d355 1
a355 4
		if (is_null( current_state() )) {
			next_state( "BEGIN" );
		}

d363 1
@


1.2
log
@*** empty log message ***
@
text
@d134 1
a134 1
				next_state( "CHECK_XML_UPLOAD" );
d149 1
a149 6
			case ($ps_state == "CHECK_XML_UPLOAD"):
// 
if (FALSE && DEBUG) {
echo "Thanks for uploading the file!<br>\n";
}
//				var_dump( $_FILES );
a150 1
// The user's name for the file (no path)
d154 10
d300 1
d305 2
a306 2
				echo "<a href=\"fetchfile.php\">" .
					"Click here to download</a><br>\n";
@


1.1
log
@Initial revision
@
text
@d3 4
a6 4
//define( 'DEBUG', FALSE );
define( 'DEBUG', TRUE  );
//define( 'CLI', FALSE );
define( 'CLI', TRUE );
d19 2
a20 1
require( 'ncc_import.php' );
d24 10
d36 2
a37 2
	$XML_PROMPT_PAGE = "xml-prompt.html";
	readfile( $XML_PROMPT_PAGE );
d42 41
a82 1
function process_state( &$ps_state )
d86 3
a88 3
if (DEBUG) {
echo "ps_entry: $ps_state<br>";
}
d92 4
d97 4
a100 3
if (DEBUG) {
echo "ps_loop: $ps_state<br>";
}
d103 7
d111 2
a112 1
				$ps_state = "PROMPT_FOR_XML_INPUT";
d115 7
d123 1
d125 1
d130 1
a130 1
if (DEBUG) {
d133 3
a135 1
				$ps_state = "CHECK_XML_UPLOAD";
a137 1
echo "CLI 1\n";
d142 7
d150 2
a151 1
if (DEBUG) {
d155 1
a155 1
				$input_nam = "ncc_xmlfile"; // from the POST form
a160 3
echo "CLI is set\ndumping argv\n";
var_dump( $argv );
echo "\n";
d162 1
a162 1
echo "input file is $filtmp.<br>\n";
d174 2
a175 2
					$ps_state = "PARSE_XML_UPLOAD";
if (DEBUG) {
d190 1
a190 1
					$ps_state = "BEGIN";	// start over
d194 7
d227 1
a227 1
					$ps_state = "CREATE_SQL_FILE";
d232 1
a232 1
					$ps_state = "BEGIN";
d237 9
d248 1
a248 1
				$sql = ncc_import( $sqlheader, $sqldetail, $sql_file );
d259 1
a259 1
				$ps_state = "PUSH_SQL_FILE";
d262 7
d271 3
d282 12
d295 9
d305 1
a305 1
				$ps_state = "BEGIN";
d308 7
d316 1
a316 2
//	state is unknown or invalid
				$ps_state = "BEGIN";
d319 4
a322 1
//echo "ps_endswitch: $ps_state<br>";
d325 1
a325 1
//echo "ps_exit: $ps_state<br>";
d332 2
d338 2
a339 5
		$state_value = $_SESSION[ "state_value" ];
if (CLI) $state_value = "PARSE_XML_UPLOAD";

		if (is_null( $state_value )) {
			$_SESSION[ "state_value" ] = "BEGIN";
d342 1
a342 8
		process_state( $state_value );

		if (is_null( $state_value )) {
//			echo "state value is not set<br>\n";
		} else {
//			echo "next state value is $state_value<br>\n";
		}
		$_SESSION[ "state_value" ] = $state_value;
@
